{"version":3,"file":"main-7a03e855.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../node_modules/@heroicons/react/24/outline/esm/ArrowDownOnSquareIcon.js","../../node_modules/@heroicons/react/24/outline/esm/ArrowPathIcon.js","../../node_modules/@heroicons/react/24/outline/esm/ArrowUpOnSquareIcon.js","../../node_modules/@heroicons/react/24/outline/esm/ChartBarIcon.js","../../node_modules/@heroicons/react/24/outline/esm/ChevronDownIcon.js","../../node_modules/@heroicons/react/24/outline/esm/ClockIcon.js","../../node_modules/@heroicons/react/24/outline/esm/DocumentTextIcon.js","../../node_modules/@heroicons/react/24/outline/esm/FunnelIcon.js","../../node_modules/@heroicons/react/24/outline/esm/PhoneIcon.js","../../node_modules/@heroicons/react/24/outline/esm/TrashIcon.js","../../src/utils/operadoraUtils.js","../../src/components/ErrorBoundary.jsx","../../src/components/StatsDisplay.jsx","../../src/components/charts/BarChart.jsx","../../src/components/DetailedStatsView.jsx","../../src/components/CallDataAnalyzer.jsx","../../src/utils/storageUtils.js","../../src/components/Logo.jsx","../../src/App.jsx","../../src/components/AssignmentManager.jsx","../../src/components/Dashboard.jsx","../../src/components/FollowUpHistory.jsx","../../src/components/LoginForm.jsx","../../src/main.jsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import * as React from \"react\";\nfunction ArrowDownOnSquareIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M9 8.25H7.5a2.25 2.25 0 0 0-2.25 2.25v9a2.25 2.25 0 0 0 2.25 2.25h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25H15M9 12l3 3m0 0 3-3m-3 3V2.25\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ArrowDownOnSquareIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ArrowPathIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ArrowPathIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ArrowUpOnSquareIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M9 8.25H7.5a2.25 2.25 0 0 0-2.25 2.25v9a2.25 2.25 0 0 0 2.25 2.25h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25H15m0-3-3-3m0 0-3 3m3-3V15\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ArrowUpOnSquareIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ChartBarIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 0 1 3 19.875v-6.75ZM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V8.625ZM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V4.125Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChartBarIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ChevronDownIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m19.5 8.25-7.5 7.5-7.5-7.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChevronDownIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ClockIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ClockIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction DocumentTextIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(DocumentTextIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction FunnelIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(FunnelIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction PhoneIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M2.25 6.75c0 8.284 6.716 15 15 15h2.25a2.25 2.25 0 0 0 2.25-2.25v-1.372c0-.516-.351-.966-.852-1.091l-4.423-1.106c-.44-.11-.902.055-1.173.417l-.97 1.293c-.282.376-.769.542-1.21.38a12.035 12.035 0 0 1-7.143-7.143c-.162-.441.004-.928.38-1.21l1.293-.97c.363-.271.527-.734.417-1.173L6.963 3.102a1.125 1.125 0 0 0-1.091-.852H4.5A2.25 2.25 0 0 0 2.25 4.5v2.25Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(PhoneIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction TrashIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(TrashIcon);\nexport default ForwardRef;","import { normalizeName } from './textUtils';\r\n\r\n/**\r\n * Obtiene la teleoperadora asignada a un beneficiario basado en su teléfono o nombre\r\n * @param {string|number} telefono - Teléfono del beneficiario\r\n * @param {string} nombre - Nombre del beneficiario\r\n * @param {Object} assignments - Objeto con las asignaciones de teleoperadoras\r\n * @returns {string} Nombre de la teleoperadora o 'No identificada'\r\n */\r\nexport const getTeleoperadora = (telefono, nombre, assignments) => {\r\n    if (!assignments?.asignaciones) {\r\n        return 'No identificada';\r\n    }\r\n\r\n    const normalizedTelefono = telefono?.toString().trim();\r\n    const normalizedNombre = normalizeName(nombre);\r\n\r\n    if (!normalizedTelefono && !normalizedNombre) {\r\n        return 'No identificada';\r\n    }\r\n\r\n    for (const [operadoraNombre, asignaciones] of Object.entries(assignments.asignaciones)) {\r\n        if (!Array.isArray(asignaciones)) continue;\r\n\r\n        const encontrado = asignaciones.some(asignacion => {\r\n            if (!asignacion) return false;\r\n            \r\n            const nombreAsignacionNormalizado = normalizeName(asignacion.beneficiario);\r\n            const nombreCoincide = normalizedNombre && nombreAsignacionNormalizado === normalizedNombre;\r\n            \r\n            const telefonoCoincide = normalizedTelefono && asignacion.telefonos && \r\n                Array.isArray(asignacion.telefonos) &&\r\n                asignacion.telefonos.some(tel => tel?.toString().trim() === normalizedTelefono);\r\n\r\n            return nombreCoincide || telefonoCoincide;\r\n        });\r\n        \r\n        if (encontrado) return operadoraNombre;\r\n    }\r\n    \r\n    return 'No identificada';\r\n};\r\n\r\n/**\r\n * Valida si un beneficiario tiene una teleoperadora asignada\r\n * @param {string} nombre - Nombre del beneficiario\r\n * @param {Object} assignments - Objeto con las asignaciones de teleoperadoras\r\n * @returns {boolean} True si tiene asignación, false si no\r\n */\r\nexport const tieneAsignacionTeleoperadora = (nombre, assignments) => {\r\n    return getTeleoperadora(null, nombre, assignments) !== 'No identificada';\r\n};\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false, error: null };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true, error };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.error('Error in component:', error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <div className=\"bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded relative\">\r\n                    <strong className=\"font-bold\">Ha ocurrido un error: </strong>\r\n                    <span className=\"block sm:inline\">{this.state.error.message}</span>\r\n                    <button\r\n                        onClick={() => this.setState({ hasError: false, error: null })}\r\n                        className=\"mt-2 bg-red-100 text-red-700 px-3 py-1 rounded hover:bg-red-200\"\r\n                    >\r\n                        Reintentar\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\n\r\nfunction StatsDisplay({ title, value, icon, subtitle = null, percentage = null }) {\r\n    return (\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-4\">\r\n            <div className=\"flex items-center justify-between mb-2\">\r\n                {icon && <div className=\"flex-shrink-0\">{icon}</div>}\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{title}</h3>\r\n            </div>\r\n            <div className=\"flex items-baseline\">                <div>\r\n                    <p className=\"text-3xl font-bold text-gray-700 dark:text-gray-200\">\r\n                        {typeof value === 'number' ? value.toLocaleString() : value || 0}\r\n                    </p>\r\n                    {subtitle && (\r\n                        <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\r\n                            {subtitle}\r\n                        </p>\r\n                    )}\r\n                    {percentage !== null && (\r\n                        <span className=\"ml-2 text-sm text-gray-500 dark:text-gray-400\">\r\n                            ({percentage}%)\r\n                        </span>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(StatsDisplay);\r\n","import React from 'react';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\n\r\nconst options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n        legend: {\r\n            position: 'top',\r\n        },\r\n    },\r\n    scales: {\r\n        y: {\r\n            beginAtZero: true,\r\n            ticks: {\r\n                precision: 0\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst BarChart = ({ data }) => {\r\n    if (!data?.labels?.length) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"h-full w-full\">\r\n            <Bar options={options} data={data} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BarChart;\r\n","import React from 'react';\r\nimport BarChart from './charts/BarChart';\r\n\r\nconst DetailedStatsView = ({ stats, operatorStats }) => {\r\n    // Métricas por comuna\r\n    const comunasData = Object.entries(stats.comunas || {}).map(([comuna, beneficiarios]) => ({\r\n        comuna,\r\n        cantidad: Array.isArray(beneficiarios) ? beneficiarios.length : 0\r\n    })).sort((a, b) => b.cantidad - a.cantidad);\r\n\r\n    // Datos de operadoras\r\n    const operadorasData = Object.entries(operatorStats || {}).map(([operadora, data]) => ({\r\n        operadora,\r\n        totalLlamadas: data.totalLlamadas || 0,\r\n        beneficiarios: data.beneficiarios || 0,\r\n        promedioLlamadas: ((data.totalLlamadas || 0) / 30).toFixed(1),\r\n        duracionPromedio: data.duracionTotal && data.totalLlamadas ? \r\n            Math.round(data.duracionTotal / data.totalLlamadas) : 0\r\n    })).sort((a, b) => b.totalLlamadas - a.totalLlamadas);\r\n\r\n    // Datos para el gráfico\r\n    const chartData = {\r\n        labels: ['8:00', '9:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00'],\r\n        datasets: [{\r\n            label: 'Cantidad de Llamadas',\r\n            data: [10, 15, 20, 25, 30, 25, 20, 15, 10, 5],\r\n            backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n        }]\r\n    };\r\n\r\n    return (\r\n        <div className=\"space-y-8\">\r\n            {/* Datos por Teleoperadora */}\r\n            {operadorasData.length > 0 && (\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\r\n                    <h3 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">\r\n                        Métricas por Teleoperadora\r\n                    </h3>\r\n                    <div className=\"overflow-x-auto\">\r\n                        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n                            <thead className=\"bg-gray-50 dark:bg-gray-700\">\r\n                                <tr>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Teleoperadora\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Total Llamadas\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Beneficiarios\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Promedio Diario\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Duración Promedio\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                                {operadorasData.map(({ operadora, totalLlamadas, beneficiarios, promedioLlamadas, duracionPromedio }) => (\r\n                                    <React.Fragment key={operadora}>\r\n                                        <tr>\r\n                                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">\r\n                                                {operadora}\r\n                                            </td>\r\n                                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">\r\n                                                {totalLlamadas}\r\n                                            </td>\r\n                                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">\r\n                                                {Array.isArray(beneficiarios) ? beneficiarios.length : beneficiarios}\r\n                                            </td>\r\n                                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">\r\n                                                {promedioLlamadas}\r\n                                            </td>\r\n                                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">\r\n                                                {duracionPromedio} min\r\n                                            </td>\r\n                                        </tr>\r\n                                        {Array.isArray(beneficiarios) && beneficiarios.length > 0 && (\r\n                                            <tr>\r\n                                                <td colSpan=\"5\" className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">\r\n                                                    <ul className=\"list-disc pl-8\">\r\n                                                        {beneficiarios.map((beneficiario, index) => (\r\n                                                            <li key={`${operadora}-${index}`} className=\"text-gray-700 dark:text-gray-300\">\r\n                                                                {beneficiario}\r\n                                                            </li>\r\n                                                        ))}\r\n                                                    </ul>\r\n                                                </td>\r\n                                            </tr>\r\n                                        )}\r\n                                    </React.Fragment>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Gráfico */}\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\r\n                <h3 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">\r\n                    Distribución Horaria de Llamadas\r\n                </h3>\r\n                <div className=\"h-[400px]\">\r\n                    <BarChart data={chartData} />\r\n                </div>\r\n            </div>\r\n\r\n            {/* Datos por Comuna */}\r\n            {comunasData.length > 0 && (\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\r\n                    <h3 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">\r\n                        Distribución por Comuna\r\n                    </h3>\r\n                    <div className=\"overflow-x-auto\">\r\n                        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n                            <thead className=\"bg-gray-50 dark:bg-gray-700\">\r\n                                <tr>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Comuna\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Beneficiarios\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                                {comunasData.map(({ comuna, cantidad }) => (\r\n                                    <tr key={comuna}>\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">\r\n                                            {comuna}\r\n                                        </td>\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">\r\n                                            {cantidad}\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DetailedStatsView;\r\n","import React, { useState, useCallback, useRef, useContext, useEffect } from 'react';\r\nimport { read, utils } from 'xlsx';\r\nimport { \r\n    ArrowUpOnSquareIcon, \r\n    ArrowDownOnSquareIcon,\r\n    ChartBarIcon,\r\n    PhoneIcon,\r\n    ClockIcon,\r\n    DocumentTextIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { DataContext } from '../App';\r\nimport { db } from '../App';\r\nimport { normalizeName } from '../utils/textUtils';\r\nimport { getTeleoperadora } from '../utils/operadoraUtils';\r\nimport { excelDateToISO } from '../utils/dateUtils';\r\nimport { prepareStatsForStorage } from '../utils/storageUtils';\r\nimport { \r\n    isLlamadaExitosa,\r\n    validateLlamada,\r\n    validateLlamadas,\r\n    createInitialStats,\r\n    parseStoredStats,\r\n    ESTADOS\r\n} from '../utils/statsUtils';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport StatsDisplay from './StatsDisplay';\r\nimport DetailedStatsView from './DetailedStatsView';\r\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\r\n\r\n// Constantes para el manejo del archivo\r\nconst CHUNK_SIZE = 1000;  // Procesar 1000 filas a la vez\r\nconst DEBOUNCE_DELAY = 300; // 300ms de espera entre eventos de cambio de archivo\r\n\r\nconst LoadingOverlay = ({ progress }) => (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl flex flex-col items-center w-80 max-w-[90vw]\">\r\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 dark:border-blue-400 mb-4\"></div>\r\n            <p className=\"text-lg mb-4 text-gray-900 dark:text-white\">Procesando archivo...</p>\r\n            {progress > 0 && (\r\n                <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5\">\r\n                    <div \r\n                        className=\"bg-blue-600 dark:bg-blue-500 h-2.5 rounded-full transition-all duration-300\" \r\n                        style={{ width: `${progress}%` }}\r\n                    ></div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nfunction CallDataAnalyzer() {\r\n    const { callData, assignments, updateCallData } = useContext(DataContext);\r\n    const [file, setFile] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [stats, setStats] = useState(createInitialStats());\r\n    const [showDetailedStats, setShowDetailedStats] = useState(false);\r\n    const [detailedStatsData, setDetailedStatsData] = useState(null);\r\n    const fileInputRef = useRef(null);\r\n    const debounceTimerRef = useRef(null);\r\n    const uploadTimeout = useRef(null);\r\n    const processingTimeout = useRef(null);\r\n    \r\n    // Referencia al estado inicial para reseteo\r\n    const initialStatsRef = useRef(createInitialStats());\r\n    // Referencia para evitar actualizaciones cíclicas\r\n    const previousStatsRef = useRef(null);\r\n\r\n    // Limpiar timeouts al desmontar\r\n    useEffect(() => {\r\n        return () => {\r\n            if (uploadTimeout.current) clearTimeout(uploadTimeout.current);\r\n            if (processingTimeout.current) clearTimeout(processingTimeout.current);\r\n            if (debounceTimerRef.current) clearTimeout(debounceTimerRef.current);\r\n        };\r\n    }, []);\r\n\r\n    // Cargar datos guardados desde Firestore al montar el componente\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (!callData) {\r\n                try {\r\n                    const docRef = doc(db, 'callData', 'stats');\r\n                    const docSnap = await getDoc(docRef);\r\n\r\n                    if (docSnap.exists()) {\r\n                        const parsedStats = parseStoredStats(docSnap.data());\r\n                        setStats(parsedStats);\r\n                    } else {\r\n                        console.log('No data found in Firestore, initializing stats.');\r\n                        setStats(initialStatsRef.current);\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error loading data from Firestore:', error);\r\n                    setStats(initialStatsRef.current);\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [callData]);\r\n\r\n    // Función para procesar el archivo\r\n    const processFile = useCallback(async () => {\r\n        if (!file) {\r\n            setError('Por favor selecciona un archivo');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setLoading(true);\r\n            setProgress(0);\r\n            setError(null);\r\n            \r\n            // Resetear el estado\r\n            setStats(initialStatsRef.current);\r\n\r\n            const reader = new FileReader();\r\n            \r\n            reader.onload = async (e) => {\r\n                try {\r\n                    if (!e.target?.result) {\r\n                        throw new Error('Error al leer el archivo');\r\n                    }\r\n\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = read(data, { type: 'array' });\r\n                    \r\n                    if (!workbook.SheetNames.length) {\r\n                        throw new Error('El archivo Excel no contiene hojas');\r\n                    }\r\n\r\n                    const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\r\n                    if (!firstSheet) {\r\n                        throw new Error('No se pudo leer la hoja de Excel');\r\n                    }\r\n\r\n                    const rows = utils.sheet_to_json(firstSheet, { header: 1 });\r\n                    if (rows.length <= 1) {\r\n                        throw new Error('El archivo no contiene datos');\r\n                    }\r\n\r\n                    const dataRows = rows.slice(1); // Ignorar encabezados\r\n                    const totalRows = dataRows.length;\r\n\r\n                    let currentStats = createInitialStats();\r\n                    \r\n                    // Procesar en chunks\r\n                    const processChunk = async (startIndex) => {\r\n                        const endIndex = Math.min(startIndex + CHUNK_SIZE, totalRows);\r\n                        const chunk = dataRows.slice(startIndex, endIndex);\r\n                        \r\n                        chunk.forEach((row) => {\r\n                            if (!Array.isArray(row) || row.length < 10) return;\r\n                            \r\n                            try {\r\n                                // Mapear columnas según el formato del Excel\r\n                                const [\r\n                                    id,             // A: Id\r\n                                    fecha,          // B: Fecha\r\n                                    beneficiario,   // C: Beneficiario\r\n                                    comuna,         // D: Comuna\r\n                                    evento,         // E: Evento (Entrante/Saliente)\r\n                                    telefono,       // F: Fono\r\n                                    horaIni,       // G: Ini\r\n                                    horaFin,       // H: Fin\r\n                                    duracion,       // I: Seg\r\n                                    resultado,      // J: Resultado\r\n                                    observacion,    // K: Observación\r\n                                    apiId          // L: Api Id\r\n                                ] = row;\r\n\r\n                                if (!beneficiario || !fecha) return;\r\n\r\n                                const normalizedNombre = normalizeName(beneficiario);\r\n                                const fechaObj = excelDateToISO(fecha); // Convertir fecha de Excel a ISO usando utilidades\r\n                                const teleoperadora = getTeleoperadora(telefono, normalizedNombre, assignments);\r\n                                const exitoso = resultado?.toString().toLowerCase().includes('exitoso');\r\n                                const duracionMinutos = Math.round(parseInt(duracion || 0) / 60); // Convertir segundos a minutos\r\n\r\n                                // Validar y preparar la llamada\r\n                                const llamada = {\r\n                                    fecha: fechaObj,\r\n                                    hora: horaIni,\r\n                                    duracion: duracionMinutos,\r\n                                    tipo: evento?.toString().toLowerCase() || '',\r\n                                    telefono: telefono?.toString() || '',\r\n                                    teleoperadora,\r\n                                    comentarios: observacion?.toString() || '',\r\n                                    resultado: resultado?.toString() || '',\r\n                                    comuna: comuna?.toString() || '',\r\n                                    exitoso\r\n                                };\r\n\r\n                                // Actualizar estadísticas\r\n                                currentStats.totalLlamadas++;\r\n                                currentStats.entrantes += evento?.toString().toLowerCase().includes('entrante') ? 1 : 0;\r\n                                currentStats.salientes += evento?.toString().toLowerCase().includes('saliente') ? 1 : 0;\r\n                                currentStats.duracionTotal += duracionMinutos;\r\n                                currentStats.duracionPromedio = currentStats.duracionTotal / currentStats.totalLlamadas;\r\n\r\n                                // Solo procesar beneficiarios válidos (no números de teléfono)\r\n                                if (normalizedNombre && isNaN(normalizedNombre)) {\r\n                                    currentStats.beneficiarios.add(normalizedNombre);\r\n                                    \r\n                                    if (!currentStats.llamadasPorBeneficiario[normalizedNombre]) {\r\n                                        currentStats.llamadasPorBeneficiario[normalizedNombre] = [];\r\n                                    }\r\n                                    currentStats.llamadasPorBeneficiario[normalizedNombre].push(llamada);\r\n                                    \r\n                                    // Actualizar última llamada\r\n                                    if (!currentStats.ultimasLlamadas[normalizedNombre]?.fecha || \r\n                                        fechaObj > currentStats.ultimasLlamadas[normalizedNombre].fecha) {\r\n                                        currentStats.ultimasLlamadas[normalizedNombre] = llamada;\r\n                                    }\r\n\r\n                                    // Actualizar comuna\r\n                                    if (comuna) {\r\n                                        if (!currentStats.comunas.has(comuna)) {\r\n                                            currentStats.comunas.set(comuna, new Set());\r\n                                        }\r\n                                        currentStats.comunas.get(comuna).add(normalizedNombre);\r\n                                    }\r\n\r\n                                    // Actualizar estado del beneficiario\r\n                                    const ultimaLlamada = currentStats.ultimasLlamadas[normalizedNombre];\r\n                                    const diasDesdeUltimaLlamada = Math.floor((new Date() - ultimaLlamada.fecha) / (1000 * 60 * 60 * 24));\r\n                                    \r\n                                    if (exitoso && diasDesdeUltimaLlamada <= 15) {\r\n                                        currentStats.beneficiariosAlDia.add(normalizedNombre);\r\n                                    } else if (!exitoso && diasDesdeUltimaLlamada > 15) {\r\n                                        currentStats.beneficiariosPendientes.add(normalizedNombre);\r\n                                    } else if (!exitoso && diasDesdeUltimaLlamada > 30) {\r\n                                        currentStats.beneficiariosUrgentes.add(normalizedNombre);\r\n                                    }\r\n\r\n                                    // Actualizar métricas de teleoperadora\r\n                                    if (!currentStats.teleoperadoras[teleoperadora]) {\r\n                                        currentStats.teleoperadoras[teleoperadora] = {\r\n                                            total: 0,\r\n                                            exitosas: 0,\r\n                                            beneficiarios: new Set()\r\n                                        };\r\n                                    }\r\n                                    currentStats.teleoperadoras[teleoperadora].total++;\r\n                                    currentStats.teleoperadoras[teleoperadora].beneficiarios.add(normalizedNombre);\r\n                                    if (exitoso) {\r\n                                        currentStats.teleoperadoras[teleoperadora].exitosas++;\r\n                                    }\r\n                                }\r\n                            } catch (err) {\r\n                                console.error('Error processing row:', err);\r\n                            }\r\n                        });\r\n                        \r\n                        const progress = Math.round((endIndex / totalRows) * 100);\r\n                        setProgress(progress);\r\n                        setStats(currentStats);\r\n                        \r\n                        if (endIndex < totalRows) {\r\n                            processingTimeout.current = setTimeout(() => processChunk(endIndex), 0);\r\n                        } else {\r\n                            setLoading(false);\r\n                            setProgress(100);\r\n                        }\r\n                    };\r\n                    \r\n                    await processChunk(0);\r\n                } catch (error) {\r\n                    console.error('Error processing Excel:', error);\r\n                    setError(`Error al procesar el archivo: ${error.message}`);\r\n                    setStats(initialStatsRef.current);\r\n                    setLoading(false);\r\n                }\r\n            };\r\n            \r\n            reader.onerror = () => {\r\n                setError('Error al leer el archivo');\r\n                setStats(initialStatsRef.current);\r\n                setLoading(false);\r\n            };\r\n            \r\n            reader.readAsArrayBuffer(file);\r\n        } catch (error) {\r\n            console.error('Error processing file:', error);\r\n            setError(`Error al procesar el archivo: ${error.message}`);\r\n            setStats(initialStatsRef.current);\r\n            setLoading(false);\r\n        }\r\n    }, [file, assignments]);\r\n\r\n    const handleFileChange = useCallback((event) => {\r\n        const selectedFile = event.target.files?.[0];\r\n        if (!selectedFile) {\r\n            setError('Por favor selecciona un archivo');\r\n            return;\r\n        }\r\n\r\n        if (!selectedFile.name.match(/\\.(xlsx|xls)$/i)) {\r\n            setError('Por favor selecciona un archivo Excel válido (.xlsx o .xls)');\r\n            if (fileInputRef.current) {\r\n                fileInputRef.current.value = '';\r\n            }\r\n            return;\r\n        }\r\n\r\n        setFile(selectedFile);\r\n        setError(null);\r\n    }, []);\r\n\r\n    // Efecto para sincronizar datos con Firestore\r\n    useEffect(() => {\r\n        if (!stats || stats.totalLlamadas === 0) return;\r\n\r\n        // Comparar con el estado previo para evitar actualizaciones innecesarias\r\n        if (previousStatsRef.current && JSON.stringify(previousStatsRef.current) === JSON.stringify(stats)) {\r\n            return;\r\n        }\r\n\r\n        previousStatsRef.current = stats;\r\n\r\n        const saveDataToFirestore = async () => {\r\n            try {\r\n                const docRef = doc(db, 'callData', 'stats');\r\n                await setDoc(docRef, prepareStatsForStorage(stats));\r\n                console.log('Data successfully saved to Firestore.');\r\n            } catch (error) {\r\n                console.error('Error saving data to Firestore:', error);\r\n            }\r\n        };\r\n\r\n        saveDataToFirestore();\r\n\r\n        // Actualizar el contexto global con las métricas calculadas\r\n        const operatorStats = {};\r\n\r\n        stats.beneficiarios.forEach((beneficiario) => {\r\n            const teleoperadora = getTeleoperadora(null, beneficiario, assignments);\r\n            if (!teleoperadora) return;\r\n\r\n            if (!operatorStats[teleoperadora]) {\r\n                operatorStats[teleoperadora] = {\r\n                    totalLlamadas: 0,\r\n                    beneficiarios: [],\r\n                    duracionTotal: 0,\r\n                };\r\n            }\r\n\r\n            operatorStats[teleoperadora].totalLlamadas += stats.llamadasPorBeneficiario[beneficiario]?.length || 0;\r\n            operatorStats[teleoperadora].duracionTotal += stats.llamadasPorBeneficiario[beneficiario]?.reduce((acc, llamada) => acc + llamada.duracion, 0) || 0;\r\n\r\n            if (!operatorStats[teleoperadora].beneficiarios.includes(beneficiario)) {\r\n                operatorStats[teleoperadora].beneficiarios.push(beneficiario);\r\n            }\r\n        });\r\n\r\n        updateCallData({\r\n            ...callData,\r\n            stats,\r\n            operatorStats,\r\n        });\r\n    }, [stats, updateCallData, assignments]);\r\n\r\n    const resetState = useCallback(() => {\r\n        setFile(null);\r\n        setStats(initialStatsRef.current);\r\n        setProgress(0);\r\n        setError(null);\r\n        setLoading(false);\r\n        if (fileInputRef.current) {\r\n            fileInputRef.current.value = '';\r\n        }\r\n\r\n        const clearFirestoreData = async () => {\r\n            try {\r\n                const docRef = doc(db, 'callData', 'stats');\r\n                await setDoc(docRef, {});\r\n                console.log('Data successfully cleared from Firestore.');\r\n            } catch (error) {\r\n                console.error('Error clearing data from Firestore:', error);\r\n            }\r\n        };\r\n\r\n        clearFirestoreData();\r\n\r\n        updateCallData(initialStatsRef.current);\r\n    }, []);\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <div className=\"p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg\">                <div className=\"flex flex-col lg:flex-row items-start lg:items-center justify-between mb-6 space-y-4 lg:space-y-0\">\r\n                    <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white flex items-center\">\r\n                        <DocumentTextIcon className=\"h-8 w-8 mr-2 text-blue-500 dark:text-blue-400\" />\r\n                        Registro de Llamadas\r\n                    </h2>\r\n                    \r\n                    <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4\">\r\n                        <button\r\n                            onClick={() => fileInputRef.current?.click()}\r\n                            className={`inline-flex items-center px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-colors duration-200\r\n                                ${loading ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-600 dark:hover:bg-blue-700'} \r\n                                bg-blue-500 dark:bg-blue-600 text-white focus:ring-blue-500`}\r\n                            disabled={loading}\r\n                        >\r\n                            <ArrowUpOnSquareIcon className=\"h-5 w-5 mr-2\" />\r\n                            {file ? file.name : 'Seleccionar Archivo'}\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={processFile}\r\n                            disabled={!file || loading}\r\n                            className={`inline-flex items-center px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-colors duration-200\r\n                                ${file && !loading \r\n                                    ? 'bg-green-500 dark:bg-green-600 text-white hover:bg-green-600 dark:hover:bg-green-700 focus:ring-green-500' \r\n                                    : 'bg-gray-300 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed'}`}\r\n                            title={!file ? 'Seleccione un archivo primero' : loading ? 'Procesando...' : 'Procesar archivo'}\r\n                        >\r\n                            <ArrowDownOnSquareIcon className=\"h-5 w-5 mr-2\" />\r\n                            {loading ? 'Procesando...' : 'Procesar Archivo'}\r\n                        </button>\r\n                        \r\n                        {stats.totalLlamadas > 0 && (\r\n                            <button\r\n                                onClick={resetState}\r\n                                className=\"inline-flex items-center px-4 py-2 bg-red-500 dark:bg-red-600 text-white rounded-lg hover:bg-red-600 dark:hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-colors duration-200\"\r\n                                title=\"Limpiar datos y cargar nuevo archivo\"\r\n                            >\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                                </svg>\r\n                                Limpiar\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                    \r\n                    <input\r\n                        type=\"file\"\r\n                        ref={fileInputRef}\r\n                        onChange={handleFileChange}\r\n                        accept=\".xlsx,.xls\"\r\n                        className=\"hidden\"\r\n                    />\r\n                </div>\r\n\r\n                {error && (\r\n                    <div className=\"mb-6 p-4 bg-red-100 dark:bg-red-900 border-l-4 border-red-500 text-red-700 dark:text-red-200\">\r\n                        <div className=\"flex items-center\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                            </svg>\r\n                            <p className=\"font-medium\">{error}</p>\r\n                        </div>\r\n                        <button \r\n                            onClick={resetState}\r\n                            className=\"mt-2 text-sm text-red-600 dark:text-red-300 hover:text-red-800 dark:hover:text-red-100\"\r\n                        >\r\n                            Intentar de nuevo\r\n                        </button>\r\n                    </div>\r\n                )}\r\n\r\n                {loading && <LoadingOverlay progress={progress} />}\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n                    <StatsDisplay\r\n                        icon={<PhoneIcon className=\"h-8 w-8 text-blue-500\" />}\r\n                        title=\"Total de Llamadas\"\r\n                        value={stats.totalLlamadas}\r\n                        subtitle={`${stats.entrantes} entrantes, ${stats.salientes} salientes`}\r\n                    />\r\n                    \r\n                    <StatsDisplay\r\n                        icon={<ChartBarIcon className=\"h-8 w-8 text-green-500\" />}\r\n                        title=\"Beneficiarios Únicos\"\r\n                        value={stats.beneficiarios.size}\r\n                        subtitle=\"Total de personas contactadas\"\r\n                    />\r\n                    \r\n                    <StatsDisplay\r\n                        icon={<ClockIcon className=\"h-8 w-8 text-purple-500\" />}\r\n                        title=\"Duración Promedio\"\r\n                        value={`${Math.round(stats.duracionPromedio)} min`}\r\n                        subtitle={`Total: ${Math.round(stats.duracionTotal)} min`}\r\n                    />\r\n                </div>                {stats.totalLlamadas > 0 && (\r\n                    <DetailedStatsView \r\n                        stats={{\r\n                            ...stats,\r\n                            comunas: stats.comunas || new Map(),\r\n                            horasPico: new Map(), // Si no estamos usando horasPico, inicializamos vacío\r\n                            totalLlamadas: stats.totalLlamadas || 0,\r\n                        }}\r\n                        operatorStats={Object.entries(stats.llamadasPorBeneficiario || {}).reduce((acc, [beneficiario, datos]) => {\r\n                            const operadora = datos.operadora || 'No asignada';\r\n                            if (!acc[operadora]) {\r\n                                acc[operadora] = {\r\n                                    totalLlamadas: 0,\r\n                                    beneficiarios: new Set(),\r\n                                    diasTrabajados: 30, // Por defecto asumimos un mes\r\n                                    duracionTotal: 0\r\n                                };\r\n                            }\r\n                            acc[operadora].totalLlamadas += datos.total || 0;\r\n                            acc[operadora].beneficiarios.add(beneficiario);\r\n                            acc[operadora].duracionTotal += (datos.total || 0) * stats.duracionPromedio;\r\n                            return acc;\r\n                        }, {})}\r\n                    />\r\n                )}\r\n            </div>\r\n        </ErrorBoundary>\r\n    );\r\n}\r\n\r\nexport default CallDataAnalyzer;\r\n","import { normalizeName } from './textUtils';\r\nimport { getTeleoperadora } from './operadoraUtils';\r\n\r\n/**\r\n * Prepara las estadísticas para ser almacenadas, convirtiendo estructuras como Set y Map a formato serializable\r\n * @param {Object} stats - Objeto de estadísticas a serializar\r\n * @param {Function} getTeleoperadoraFn - Función para obtener la teleoperadora de un beneficiario\r\n * @returns {Object} Estadísticas en formato serializable\r\n */\r\nexport const prepareStatsForStorage = (stats, assignments) => {\r\n    if (!stats) return null;\r\n\r\n    try {\r\n        return {\r\n            totalLlamadas: stats.totalLlamadas || 0,\r\n            entrantes: stats.entrantes || 0,\r\n            salientes: stats.salientes || 0,\r\n            duracionTotal: stats.duracionTotal || 0,\r\n            duracionPromedio: stats.duracionPromedio || 0,\r\n            \r\n            // Convertir Sets a arrays\r\n            beneficiarios: Array.from(stats.beneficiarios || []),\r\n            beneficiariosAlDia: Array.from(stats.beneficiariosAlDia || []),\r\n            beneficiariosPendientes: Array.from(stats.beneficiariosPendientes || []),\r\n            beneficiariosUrgentes: Array.from(stats.beneficiariosUrgentes || []),\r\n            \r\n            // Convertir Map de comunas a objeto\r\n            comunas: Object.fromEntries(\r\n                Array.from(stats.comunas || []).map(([comuna, beneficiarios]) => [\r\n                    comuna,\r\n                    Array.from(beneficiarios || [])\r\n                ])\r\n            ),\r\n            \r\n            // Procesar llamadas por beneficiario\r\n            llamadasPorBeneficiario: Object.entries(stats.llamadasPorBeneficiario || {}).reduce((acc, [beneficiario, llamadas]) => {\r\n                acc[beneficiario] = {\r\n                    total: Array.isArray(llamadas) ? llamadas.length : 0,\r\n                    operadora: getTeleoperadora(null, beneficiario, assignments),\r\n                    estado: stats.beneficiariosAlDia?.has(beneficiario) \r\n                        ? 'al-dia' \r\n                        : stats.beneficiariosUrgentes?.has(beneficiario)\r\n                            ? 'urgente'\r\n                            : 'pendiente',\r\n                    llamadas: Array.isArray(llamadas) ? llamadas.map(llamada => ({\r\n                        ...llamada,\r\n                        fecha: (llamada.fecha instanceof Date && !isNaN(llamada.fecha)) ? llamada.fecha.toISOString() : (typeof llamada.fecha === 'string' ? llamada.fecha : null)\r\n                    })) : []\r\n                };\r\n                return acc;\r\n            }, {}),\r\n            \r\n            // Convertir fechas en últimas llamadas\r\n            ultimasLlamadas: Object.entries(stats.ultimasLlamadas || {}).reduce((acc, [beneficiario, llamada]) => {\r\n                if (llamada) {\r\n                    acc[beneficiario] = {\r\n                        ...llamada,\r\n                        fecha: (llamada.fecha instanceof Date && !isNaN(llamada.fecha)) ? llamada.fecha.toISOString() : (typeof llamada.fecha === 'string' ? llamada.fecha : null)\r\n                    };\r\n                }\r\n                return acc;\r\n            }, {}),\r\n            \r\n            // Convertir llamadas exitosas\r\n            llamadasExitosas: Object.entries(stats.llamadasExitosas || {}).reduce((acc, [beneficiario, llamadas]) => {\r\n                if (Array.isArray(llamadas)) {\r\n                    acc[beneficiario] = llamadas.map(llamada => ({\r\n                        ...llamada,\r\n                        fecha: (llamada.fecha instanceof Date && !isNaN(llamada.fecha)) ? llamada.fecha.toISOString() : (typeof llamada.fecha === 'string' ? llamada.fecha : null)\r\n                    }));\r\n                }\r\n                return acc;\r\n            }, {}),\r\n\r\n            // Convertir datos de teleoperadoras\r\n            teleoperadoras: Object.entries(stats.teleoperadoras || {}).reduce((acc, [operadora, datos]) => {\r\n                acc[operadora] = {\r\n                    total: datos.total || 0,\r\n                    exitosas: datos.exitosas || 0,\r\n                    beneficiarios: Array.from(datos.beneficiarios || [])\r\n                };\r\n                return acc;\r\n            }, {})\r\n        };\r\n    } catch (error) {\r\n        console.error('Error preparing stats for storage:', error);\r\n        return null;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport { useTheme } from '../App';\r\n\r\nconst Logo = () => {\r\n  const { darkMode, toggleTheme } = useTheme();\r\n  \r\n  return (\r\n    <div className=\"flex items-center justify-between w-full px-4\">\r\n      <div className=\"flex items-center\">\r\n        <img \r\n          src=\"https://www.mistatas.cl/assets/img/logo-small.png\"\r\n          alt=\"Mistatas Logo\"\r\n          className=\"h-12 w-auto mr-2\"\r\n        />\r\n      </div>\r\n      <button\r\n        onClick={toggleTheme}\r\n        className=\"p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors\"\r\n        aria-label=\"Toggle dark mode\"\r\n      >\r\n        {darkMode ? (\r\n          <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\r\n          </svg>\r\n        ) : (\r\n          <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\r\n          </svg>\r\n        )}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React, { useState, useEffect, createContext, useContext, useCallback } from 'react';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { \r\n    getAuth, \r\n    signInWithEmailAndPassword, \r\n    createUserWithEmailAndPassword, \r\n    signOut, \r\n    onAuthStateChanged,\r\n    signInAnonymously,\r\n    deleteUser\r\n} from 'firebase/auth';\r\nimport { \r\n    getFirestore, \r\n    collection, \r\n    doc, \r\n    addDoc, \r\n    setDoc, \r\n    getDocs, \r\n    updateDoc, \r\n    deleteDoc,\r\n    query,\r\n    where,\r\n    Timestamp,\r\n    writeBatch\r\n} from 'firebase/firestore';\r\nimport { getAnalytics } from 'firebase/analytics';\r\nimport CallDataAnalyzer from './components/CallDataAnalyzer';\r\nimport Logo from './components/Logo';\r\nimport AssignmentManager from './components/AssignmentManager';\r\nimport Dashboard from './components/Dashboard';\r\nimport FollowUpHistory from './components/FollowUpHistory';\r\nimport LoginForm from './components/LoginForm';\r\n\r\n// Firebase Configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyASPhkFj4RwmmloxSgJzK3JhXD7-qz2yxk\",\r\n    authDomain: \"teleasistencia-6c0fd.firebaseapp.com\",\r\n    projectId: \"teleasistencia-6c0fd\",\r\n    storageBucket: \"teleasistencia-6c0fd.firebasestorage.app\",\r\n    messagingSenderId: \"551971576400\",\r\n    appId: \"1:551971576400:web:952333e1409c2ecdaf8f55\",\r\n    measurementId: \"G-4Z9KWG6JJS\"\r\n};\r\n\r\n// Firebase Initialization\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\nconst auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\n\r\n// Contexto para autenticación\r\nexport const AuthContext = createContext();\r\n\r\n// Contexto para datos\r\nexport const DataContext = createContext();\r\n\r\n// Proveedor de autenticación\r\nexport function AuthProvider({ children }) {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n            setUser(user);\r\n            setLoading(false);\r\n        });\r\n\r\n        return unsubscribe;\r\n    }, []);\r\n\r\n    const value = {\r\n        user,\r\n        loading,\r\n        signIn: (email, password) => signInWithEmailAndPassword(auth, email, password),\r\n        signOut: () => signOut(auth)\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\n// Hook personalizado para usar la autenticación\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}\r\n\r\n// Estado inicial para el contexto de datos\r\nconst initialCallData = {\r\n    totalLlamadas: 0,\r\n    entrantes: 0,\r\n    salientes: 0,\r\n    duracionTotal: 0,\r\n    duracionPromedio: 0,\r\n    beneficiarios: [],\r\n    llamadasPorBeneficiario: {},\r\n    ultimasLlamadas: {},\r\n    llamadasExitosas: {},\r\n    beneficiariosAlDia: [],\r\n    beneficiariosPendientes: [],\r\n    beneficiariosUrgentes: [],\r\n    comunas: {},\r\n    teleoperadoras: {},\r\n    lastUpdate: null\r\n};\r\n\r\n// Proveedor de datos\r\nexport function DataProvider({ children }) {\r\n    const [callData, setCallData] = useState(() => {\r\n        // Intentar cargar datos desde localStorage\r\n        try {\r\n            const saved = localStorage.getItem('callData');\r\n            return saved ? JSON.parse(saved) : initialCallData;\r\n        } catch (error) {\r\n            console.error('Error loading data from localStorage:', error);\r\n            return initialCallData;\r\n        }\r\n    });\r\n\r\n    const [assignments, setAssignments] = useState(() => {\r\n        // Intentar cargar asignaciones desde localStorage\r\n        try {\r\n            const saved = localStorage.getItem('assignments');\r\n            return saved ? JSON.parse(saved) : { asignaciones: {} };\r\n        } catch (error) {\r\n            console.error('Error loading assignments from localStorage:', error);\r\n            return { asignaciones: {} };\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        // Cargar datos desde localStorage al iniciar\r\n        try {\r\n            const savedCallData = localStorage.getItem('callData');\r\n            if (savedCallData) {\r\n                setCallData(JSON.parse(savedCallData));\r\n            }\r\n        } catch (error) {\r\n            console.error('Error al cargar datos desde localStorage:', error);\r\n        }\r\n    }, []);\r\n\r\n    // Guardar datos en localStorage cuando cambien\r\n    useEffect(() => {\r\n        // Guardar datos en localStorage cuando cambien\r\n        try {\r\n            if (callData && Object.keys(callData).length > 0) {\r\n                localStorage.setItem('callData', JSON.stringify(callData));\r\n            }\r\n        } catch (error) {\r\n            console.error('Error guardando datos en localStorage:', error);\r\n        }\r\n    }, [callData]);\r\n\r\n    // Guardar asignaciones en localStorage cuando cambien\r\n    useEffect(() => {\r\n        try {\r\n            if (assignments && Object.keys(assignments).length > 0) {\r\n                localStorage.setItem('assignments', JSON.stringify(assignments));\r\n            }\r\n        } catch (error) {\r\n            console.error('Error guardando asignaciones:', error);\r\n        }\r\n    }, [assignments]);\r\n\r\n    useEffect(() => {\r\n        // Cargar datos desde Firestore al iniciar\r\n        const fetchData = async () => {\r\n            try {\r\n                const docRef = doc(db, 'callData', 'latest');\r\n                const docSnap = await getDoc(docRef);\r\n                if (docSnap.exists()) {\r\n                    setCallData(docSnap.data());\r\n                } else {\r\n                    console.log('No se encontraron datos en Firestore');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error al cargar datos desde Firestore:', error);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Guardar datos en Firestore cuando cambien\r\n        const saveData = async () => {\r\n            try {\r\n                if (callData && Object.keys(callData).length > 0) {\r\n                    const docRef = doc(db, 'callData', 'latest');\r\n                    await setDoc(docRef, callData);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error guardando datos en Firestore:', error);\r\n            }\r\n        };\r\n        saveData();\r\n    }, [callData]);\r\n\r\n    // Función para actualizar datos\r\n    const updateCallData = useCallback((newData) => {\r\n        console.log('Actualizando datos de llamadas:', newData);\r\n        setCallData(prevData => {\r\n            // Asegurarse de que las estructuras de datos estén presentes\r\n            const updatedData = {\r\n                ...initialCallData,\r\n                ...prevData,\r\n                ...newData,\r\n                lastUpdate: new Date().toISOString(),\r\n                // Asegurar que las propiedades críticas existan\r\n                llamadasPorBeneficiario: {\r\n                    ...(prevData.llamadasPorBeneficiario || {}),\r\n                    ...(newData.llamadasPorBeneficiario || {})\r\n                },\r\n                beneficiarios: Array.isArray(newData.beneficiarios) ? newData.beneficiarios : [],\r\n                beneficiariosAlDia: Array.isArray(newData.beneficiariosAlDia) ? newData.beneficiariosAlDia : [],\r\n                beneficiariosPendientes: Array.isArray(newData.beneficiariosPendientes) ? newData.beneficiariosPendientes : [],\r\n                beneficiariosUrgentes: Array.isArray(newData.beneficiariosUrgentes) ? newData.beneficiariosUrgentes : []\r\n            };\r\n            return updatedData;\r\n        });\r\n    }, []);\r\n\r\n    // Función para actualizar asignaciones\r\n    const updateAssignments = useCallback((newAssignments) => {\r\n        setAssignments(prev => ({\r\n            ...prev,\r\n            asignaciones: {\r\n                ...(prev.asignaciones || {}),\r\n                ...newAssignments\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    return (\r\n        <DataContext.Provider value={{ \r\n            callData, \r\n            updateCallData, \r\n            assignments, \r\n            updateAssignments,\r\n            reset: () => {\r\n                setCallData(initialCallData);\r\n                setAssignments({ asignaciones: {} });\r\n                localStorage.removeItem('callData');\r\n                localStorage.removeItem('assignments');\r\n            }\r\n        }}>\r\n            {children}\r\n        </DataContext.Provider>\r\n    );\r\n}\r\n\r\n// Contexto del tema\r\nexport const ThemeContext = createContext();\r\n\r\n// Proveedor del tema\r\nexport function ThemeProvider({ children }) {\r\n    const [darkMode, setDarkMode] = useState(false);\r\n\r\n    const toggleTheme = () => {\r\n        setDarkMode(!darkMode);\r\n        document.documentElement.classList.toggle('dark');\r\n    };\r\n\r\n    const value = {\r\n        darkMode,\r\n        toggleTheme\r\n    };\r\n\r\n    return (\r\n        <ThemeContext.Provider value={value}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    );\r\n}\r\n\r\n// Hook personalizado para usar el tema\r\nexport function useTheme() {\r\n    return useContext(ThemeContext);\r\n}\r\n\r\n// Componente principal de la aplicación\r\nfunction MainContent() {\r\n    const { user, loading } = useAuth();\r\n    const [activeTab, setActiveTab] = useState('dashboard');\r\n    \r\n    if (loading) {\r\n        return <div>Cargando...</div>;\r\n    }\r\n\r\n    if (!user) {\r\n        return <LoginForm />;\r\n    }    return (\r\n        <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-200\">\r\n            <div className=\"flex flex-col h-screen\">\r\n                {/* Header */}\r\n                <header className=\"bg-white dark:bg-gray-800 shadow-md\">\r\n                    <div className=\"responsive-container\">\r\n                        <div className=\"flex flex-col lg:flex-row justify-between items-center py-4 space-y-4 lg:space-y-0\">\r\n                            <div className=\"flex items-center w-full lg:w-auto justify-between\">\r\n                                <Logo />\r\n                                <button \r\n                                    onClick={() => auth.signOut()}\r\n                                    className=\"lg:hidden px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors duration-150\"\r\n                                >\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                                        <path fillRule=\"evenodd\" d=\"M3 3a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1H3zm11 4a1 1 0 11-2 0 1 1 0 012 0zm-8 0a1 1 0 11-2 0 1 1 0 012 0zm4 0a1 1 0 11-2 0 1 1 0 012 0z\" clipRule=\"evenodd\" />\r\n                                    </svg>\r\n                                </button>\r\n                            </div>\r\n                            \r\n                            <nav className=\"flex flex-wrap justify-center gap-2 w-full lg:w-auto overflow-x-auto\">\r\n                                <button \r\n                                    onClick={() => setActiveTab('dashboard')}\r\n                                    className={`px-4 py-2 rounded-lg transition-colors duration-150 whitespace-nowrap ${\r\n                                        activeTab === 'dashboard' \r\n                                            ? 'bg-blue-500 text-white dark:bg-blue-600' \r\n                                            : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\r\n                                    }`}\r\n                                >\r\n                                    Dashboard\r\n                                </button>\r\n                                <button \r\n                                    onClick={() => setActiveTab('llamadas')}\r\n                                    className={`px-4 py-2 rounded-lg transition-colors duration-150 whitespace-nowrap ${\r\n                                        activeTab === 'llamadas' \r\n                                            ? 'bg-blue-500 text-white dark:bg-blue-600' \r\n                                            : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\r\n                                    }`}\r\n                                >\r\n                                    Registro de Llamadas\r\n                                </button>\r\n                                <button \r\n                                    onClick={() => setActiveTab('asignaciones')}\r\n                                    className={`px-4 py-2 rounded-lg transition-colors duration-150 whitespace-nowrap ${\r\n                                        activeTab === 'asignaciones' \r\n                                            ? 'bg-blue-500 text-white dark:bg-blue-600' \r\n                                            : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\r\n                                    }`}\r\n                                >\r\n                                    Asignaciones\r\n                                </button>\r\n                                <button \r\n                                    onClick={() => setActiveTab('seguimiento')}\r\n                                    className={`px-4 py-2 rounded-lg transition-colors duration-150 whitespace-nowrap ${\r\n                                        activeTab === 'seguimiento' \r\n                                            ? 'bg-blue-500 text-white dark:bg-blue-600' \r\n                                            : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\r\n                                    }`}\r\n                                >\r\n                                    Historial de Seguimientos\r\n                                </button>\r\n                            </nav>\r\n                            \r\n                            <button \r\n                                onClick={() => auth.signOut()}\r\n                                className=\"hidden lg:block px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors duration-150\"\r\n                            >\r\n                                Cerrar Sesión\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n                {/* Version marker */}\r\n                <div className=\"absolute top-4 right-4 text-sm text-gray-500 dark:text-gray-400\">\r\n                    Ver. 1.0.0\r\n                </div>\r\n                {/* Main content */}\r\n                <main className=\"flex-1 overflow-y-auto bg-gray-50 dark:bg-gray-900 transition-colors duration-200\">\r\n                    <div className=\"responsive-container py-6\">\r\n                        <div className=\"w-full overflow-x-hidden\">\r\n                            {activeTab === 'dashboard' && <Dashboard />}\r\n                            {activeTab === 'llamadas' && <CallDataAnalyzer />}\r\n                            {activeTab === 'asignaciones' && <AssignmentManager />}\r\n                            {activeTab === 'seguimiento' && <FollowUpHistory />}\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n                {/* Footer */}\r\n                <footer className=\"bg-gray-100 dark:bg-gray-800 text-center py-4\">\r\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">Ver. 1.0.0</p>\r\n                </footer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Componente raíz de la aplicación\r\nfunction App() {\r\n    return (\r\n        <ThemeProvider>\r\n            <AuthProvider>\r\n                <DataProvider>\r\n                    <MainContent />\r\n                </DataProvider>\r\n            </AuthProvider>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React, { useState, useEffect, useContext, useCallback, useRef, memo } from 'react';\r\nimport { collection, doc, setDoc, deleteDoc, onSnapshot, query, where, getDocs, writeBatch } from 'firebase/firestore';\r\nimport { read, utils } from 'xlsx';\r\nimport { ArrowUpOnSquareIcon, ArrowPathIcon, TrashIcon, ChevronDownIcon } from '@heroicons/react/24/outline';\r\nimport { db } from '../App';\r\nimport { DataContext } from '../App';\r\n\r\n// Componente Toast separado\r\nconst Toast = memo(({ message, type, onDismiss }) => {\r\n    useEffect(() => {\r\n        if (message) {\r\n            const timer = setTimeout(onDismiss, 3000);\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [message, onDismiss]);\r\n\r\n    if (!message) return null;\r\n\r\n    return (\r\n        <div className={`fixed bottom-5 right-5 text-white px-6 py-3 rounded-lg shadow-lg ${\r\n            type === 'success' ? 'bg-green-500' : 'bg-red-500'\r\n        }`}>\r\n            {message}\r\n        </div>\r\n    );\r\n});\r\n\r\n// Componente LoadingOverlay separado\r\nconst LoadingOverlay = ({ progress, stats }) => (\r\n    <div className=\"fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50\">\r\n        <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4\">\r\n            <div className=\"flex flex-col items-center\">\r\n                <ArrowPathIcon className=\"w-12 h-12 animate-spin text-blue-500 mb-4\" />\r\n                <h3 className=\"text-lg font-semibold mb-2\">Procesando archivo...</h3>\r\n                <div className=\"w-full bg-gray-200 rounded-full h-2.5 mb-2\">\r\n                    <div \r\n                        className=\"bg-blue-600 h-2.5 rounded-full transition-all duration-300\"\r\n                        style={{ width: `${(progress.processed / progress.total) * 100}%` }}\r\n                    />\r\n                </div>\r\n                <p className=\"text-sm text-gray-600 mb-2\">\r\n                    Procesando {progress.processed} de {progress.total} registros\r\n                </p>\r\n                {stats && (\r\n                    <div className=\"text-sm space-y-1 text-gray-600 text-center border-t border-gray-200 pt-3 mt-2 w-full\">\r\n                        <p>✅ {stats.beneficiariosCreados} nuevos beneficiarios</p>\r\n                        <p>🔄 {stats.duplicadosEncontrados} beneficiarios existentes</p>\r\n                        <p>📋 {stats.asignacionesCreadas} asignaciones creadas</p>\r\n                        {stats.errores > 0 && (\r\n                            <p className=\"text-red-500\">❌ {stats.errores} errores encontrados</p>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\n// Componente para la tarjeta de asignación\r\nconst AsignacionCard = memo(({ asignacion, beneficiario, onDelete }) => {\r\n    if (!beneficiario) return null;\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-between py-3 px-4 bg-white border border-gray-100 rounded-lg hover:border-gray-200 transition-colors\">\r\n            <div className=\"flex flex-col\">\r\n                <span className=\"text-sm font-medium text-gray-900\">\r\n                    {beneficiario.nombre}\r\n                </span>\r\n                {beneficiario.telefono && (\r\n                    <span className=\"text-xs text-gray-500 mt-1\">\r\n                        📞 {beneficiario.telefono}\r\n                    </span>\r\n                )}\r\n            </div>\r\n            <button\r\n                onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    onDelete(asignacion.id, beneficiario.nombre);\r\n                }}\r\n                className=\"text-red-600 hover:text-red-800 p-2 hover:bg-red-50 rounded-full transition-colors\"\r\n                title=\"Eliminar asignación\"\r\n            >\r\n                <TrashIcon className=\"h-5 w-5\" />\r\n            </button>\r\n        </div>\r\n    );\r\n});\r\n\r\n// Componente principal\r\nconst AssignmentManager = () => {\r\n    // Contexto\r\n    const { updateAssignments } = useContext(DataContext);\r\n\r\n    // Estados\r\n    const [loading, setLoading] = useState(true);\r\n    const [operadoras, setOperadoras] = useState([]);\r\n    const [beneficiarios, setBeneficiarios] = useState([]);\r\n    const [assignments, setAssignments] = useState([]);\r\n    const [selectedOperadora, setSelectedOperadora] = useState('');\r\n    const [selectedBeneficiario, setSelectedBeneficiario] = useState('');\r\n    const [expandedOperadora, setExpandedOperadora] = useState(null);\r\n    const [file, setFile] = useState(null);\r\n    const [toast, setToast] = useState({ message: '', type: '' });    // Estados adicionales para el manejo de carga\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [uploadProgress, setUploadProgress] = useState({ total: 0, processed: 0 });\r\n    const [uploadStats, setUploadStats] = useState({\r\n        beneficiariosCreados: 0,\r\n        duplicadosEncontrados: 0,\r\n        asignacionesCreadas: 0,\r\n        errores: 0\r\n    });\r\n\r\n    // Referencias\r\n    const loadingStatus = useRef({\r\n        operadoras: false,\r\n        beneficiarios: false,\r\n        asignaciones: false\r\n    });\r\n\r\n    // Callbacks\r\n    const checkDataLoaded = useCallback(() => {\r\n        const status = loadingStatus.current;\r\n        if (status.operadoras && status.beneficiarios && status.asignaciones) {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    const handleCreateAssignment = useCallback(async () => {\r\n        if (!selectedOperadora || !selectedBeneficiario) return;\r\n\r\n        try {\r\n            const operadora = operadoras.find(op => op.id === selectedOperadora);\r\n            const beneficiario = beneficiarios.find(b => b.id === selectedBeneficiario);\r\n\r\n            if (!operadora || !beneficiario) {\r\n                setToast({ message: 'Error: Operadora o beneficiario no encontrado', type: 'error' });\r\n                return;\r\n            }\r\n\r\n            const newAssignment = {\r\n                operadoraId: selectedOperadora,\r\n                beneficiarioId: selectedBeneficiario,\r\n                createdAt: new Date().toISOString()\r\n            };\r\n\r\n            const assignmentRef = doc(collection(db, 'asignaciones'));\r\n            await setDoc(assignmentRef, newAssignment);\r\n\r\n            setSelectedOperadora('');\r\n            setSelectedBeneficiario('');\r\n            setToast({ message: 'Asignación creada con éxito', type: 'success' });\r\n        } catch (error) {\r\n            console.error('Error creating assignment:', error);\r\n            setToast({ message: 'Error al crear la asignación', type: 'error' });\r\n        }\r\n    }, [selectedOperadora, selectedBeneficiario, operadoras, beneficiarios]);\r\n\r\n    const handleDeleteAssignment = useCallback(async (assignmentId, beneficiarioNombre) => {\r\n        try {\r\n            await deleteDoc(doc(db, 'asignaciones', assignmentId));\r\n            setToast({ \r\n                message: `Asignación de ${beneficiarioNombre} eliminada con éxito`, \r\n                type: 'success' \r\n            });\r\n        } catch (error) {\r\n            console.error('Error deleting assignment:', error);\r\n            setToast({ message: 'Error al eliminar la asignación', type: 'error' });\r\n        }\r\n    }, []);    const validateBeneficiario = async (nombre, telefono) => {\r\n        // Buscar beneficiarios existentes con el mismo nombre o teléfono\r\n        const beneficiariosRef = collection(db, 'beneficiarios');\r\n        const nombreQuery = query(beneficiariosRef, where('nombre', '==', nombre.trim()));\r\n        const telefonoQuery = telefono ? \r\n            query(beneficiariosRef, where('telefono', '==', telefono.trim())) : \r\n            null;\r\n\r\n        const [nombreSnapshot, telefonoSnapshot] = await Promise.all([\r\n            getDocs(nombreQuery),\r\n            telefonoQuery ? getDocs(telefonoQuery) : Promise.resolve({ empty: true })\r\n        ]);\r\n\r\n        if (!nombreSnapshot.empty) {\r\n            const existente = nombreSnapshot.docs[0];\r\n            return {\r\n                existe: true,\r\n                id: existente.id,\r\n                data: existente.data()\r\n            };\r\n        }\r\n\r\n        if (telefonoQuery && !telefonoSnapshot.empty) {\r\n            const existente = telefonoSnapshot.docs[0];\r\n            return {\r\n                existe: true,\r\n                id: existente.id,\r\n                data: existente.data()\r\n            };\r\n        }\r\n\r\n        return { existe: false };\r\n    };\r\n\r\n    const handleFileUpload = useCallback(async () => {\r\n        if (!file || !selectedOperadora) return;\r\n        \r\n        try {\r\n            setIsUploading(true);\r\n            const data = await file.arrayBuffer();\r\n            const workbook = read(data);\r\n            const worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n            const rows = utils.sheet_to_json(worksheet, { header: ['nombre', 'telefono'] });\r\n            \r\n            // Skip header row\r\n            const dataRows = rows.slice(1);\r\n            setUploadProgress({ total: dataRows.length, processed: 0 });\r\n\r\n            // Primero, verificar si hay asignaciones existentes para esta operadora\r\n            const asignacionesRef = collection(db, 'asignaciones');\r\n            const asignacionesQuery = query(asignacionesRef, where('operadoraId', '==', selectedOperadora));\r\n            const asignacionesSnapshot = await getDocs(asignacionesQuery);\r\n            \r\n            // Eliminar asignaciones existentes si las hay\r\n            const batch = writeBatch(db);\r\n            asignacionesSnapshot.docs.forEach(doc => {\r\n                batch.delete(doc.ref);\r\n            });\r\n            await batch.commit();\r\n              // Reiniciar estadísticas\r\n            setUploadStats({\r\n                beneficiariosCreados: 0,\r\n                duplicadosEncontrados: 0,\r\n                asignacionesCreadas: 0,\r\n                errores: 0\r\n            });\r\n            \r\n            for (const [index, row] of dataRows.entries()) {\r\n                if (!row.nombre) continue;\r\n                \r\n                try {\r\n                    setUploadProgress(prev => ({ ...prev, processed: index + 1 }));\r\n\r\n                    // Validar si el beneficiario ya existe\r\n                    const telefonos = row.telefono ? \r\n                        row.telefono.toString().split(',').map(t => t.trim()).filter(t => t) : \r\n                        [];\r\n                    \r\n                    const beneficiarioExistente = await validateBeneficiario(row.nombre, telefonos[0]);\r\n                    let beneficiarioId;                    if (beneficiarioExistente.existe) {\r\n                        setUploadStats(prev => ({\r\n                            ...prev,\r\n                            duplicadosEncontrados: prev.duplicadosEncontrados + 1\r\n                        }));\r\n                        beneficiarioId = beneficiarioExistente.id;\r\n                    } else {\r\n                        // Crear nuevo beneficiario\r\n                        const beneficiarioRef = doc(collection(db, 'beneficiarios'));\r\n                        await setDoc(beneficiarioRef, {\r\n                            nombre: row.nombre.trim(),\r\n                            telefono: telefonos[0] || '',\r\n                            telefonos: telefonos,\r\n                            createdAt: new Date().toISOString()\r\n                        });\r\n                        setUploadStats(prev => ({\r\n                            ...prev,\r\n                            beneficiariosCreados: prev.beneficiariosCreados + 1\r\n                        }));\r\n                        beneficiarioId = beneficiarioRef.id;\r\n                    }\r\n\r\n                    // Crear asignación\r\n                    const asignacionRef = doc(collection(db, 'asignaciones'));\r\n                    await setDoc(asignacionRef, {\r\n                        operadoraId: selectedOperadora,\r\n                        beneficiarioId: beneficiarioId,\r\n                        createdAt: new Date().toISOString()\r\n                    });\r\n                    setUploadStats(prev => ({\r\n                        ...prev,\r\n                        asignacionesCreadas: prev.asignacionesCreadas + 1\r\n                    }));\r\n\r\n                } catch (error) {\r\n                    console.error(`Error procesando fila ${row.nombre}:`, error);\r\n                    setUploadStats(prev => ({\r\n                        ...prev,\r\n                        errores: prev.errores + 1\r\n                    }));\r\n                }\r\n            }\r\n            \r\n            setFile(null);\r\n            setSelectedOperadora('');            const stats = uploadStats;\r\n            let message = `Proceso completado: ${stats.beneficiariosCreados} beneficiarios nuevos, ${stats.duplicadosEncontrados} existentes, ${stats.asignacionesCreadas} asignaciones creadas`;\r\n            if (stats.errores > 0) {\r\n                message += `, ${stats.errores} errores encontrados`;\r\n            }\r\n            \r\n            setToast({ message, type: stats.errores > 0 ? 'error' : 'success' });\r\n        } catch (error) {\r\n            console.error('Error procesando archivo:', error);\r\n            setToast({ message: 'Error procesando archivo', type: 'error' });\r\n        } finally {\r\n            setIsUploading(false);\r\n            setUploadProgress({ total: 0, processed: 0 });\r\n            setUploadStats({\r\n                beneficiariosCreados: 0,\r\n                duplicadosEncontrados: 0,\r\n                asignacionesCreadas: 0,\r\n                errores: 0\r\n            });\r\n        }\r\n    }, [file, selectedOperadora]);\r\n\r\n    // Efectos\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        const unsubscribes = [];\r\n\r\n        const setupSubscriptions = async () => {\r\n            try {\r\n                // Suscripción a operadoras\r\n                const operadorasQuery = query(collection(db, 'users'));\r\n                const unsubOperadoras = onSnapshot(operadorasQuery, (snapshot) => {\r\n                    if (!isMounted) return;\r\n                    \r\n                    const operadorasData = snapshot.docs\r\n                        .map(doc => ({\r\n                            id: doc.id,\r\n                            ...doc.data()\r\n                        }))\r\n                        .filter(user => user.rol === 'teleoperadora');\r\n\r\n                    setOperadoras(operadorasData);\r\n                    loadingStatus.current.operadoras = true;\r\n                    checkDataLoaded();\r\n                });\r\n                unsubscribes.push(unsubOperadoras);\r\n\r\n                // Suscripción a beneficiarios\r\n                const beneficiariosQuery = query(collection(db, 'beneficiarios'));\r\n                const unsubBeneficiarios = onSnapshot(beneficiariosQuery, (snapshot) => {\r\n                    if (!isMounted) return;\r\n                    \r\n                    const beneficiariosData = snapshot.docs.map(doc => ({\r\n                        id: doc.id,\r\n                        ...doc.data()\r\n                    }));\r\n                    setBeneficiarios(beneficiariosData);\r\n                    loadingStatus.current.beneficiarios = true;\r\n                    checkDataLoaded();\r\n                });\r\n                unsubscribes.push(unsubBeneficiarios);\r\n\r\n                // Suscripción a asignaciones\r\n                const asignacionesQuery = query(collection(db, 'asignaciones'));\r\n                const unsubAsignaciones = onSnapshot(asignacionesQuery, (snapshot) => {\r\n                    if (!isMounted) return;\r\n                    \r\n                    const assignmentsData = snapshot.docs.map(doc => ({\r\n                        id: doc.id,\r\n                        ...doc.data()\r\n                    }));\r\n                    setAssignments(assignmentsData);\r\n                    loadingStatus.current.asignaciones = true;\r\n                    checkDataLoaded();\r\n                });\r\n                unsubscribes.push(unsubAsignaciones);\r\n\r\n            } catch (error) {\r\n                console.error('Error setting up subscriptions:', error);\r\n                if (isMounted) {\r\n                    setToast({ message: 'Error cargando datos', type: 'error' });\r\n                    setLoading(false);\r\n                }\r\n            }\r\n        };\r\n\r\n        setupSubscriptions();\r\n\r\n        return () => {\r\n            isMounted = false;\r\n            unsubscribes.forEach(unsub => unsub());\r\n        };\r\n    }, [checkDataLoaded]);\r\n\r\n    // Loading state\r\n    if (loading) {\r\n        return (\r\n            <div className=\"flex flex-col items-center justify-center p-8\">\r\n                <div className=\"flex items-center mb-4\">\r\n                    <ArrowPathIcon className=\"w-8 h-8 animate-spin text-blue-500\" />\r\n                    <span className=\"ml-2\">Cargando datos...</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"space-y-6\">            {/* File upload section */}\r\n            <div className=\"bg-white rounded-xl shadow-md p-6\">\r\n                <h3 className=\"text-lg font-semibold mb-4\">Carga Masiva de Asignaciones</h3>\r\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6\">\r\n                    <div className=\"mb-6\">\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                            Seleccionar Teleoperadora\r\n                        </label>\r\n                        <select\r\n                            value={selectedOperadora}\r\n                            onChange={(e) => setSelectedOperadora(e.target.value)}\r\n                            className=\"w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\r\n                        >\r\n                            <option value=\"\">Seleccionar operadora para asignación masiva</option>\r\n                            {operadoras.map(op => (\r\n                                <option key={op.id} value={op.id}>{op.nombre}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\r\n                        <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Formato del Excel:</h4>\r\n                        <div className=\"space-y-2\">\r\n                            <p className=\"text-xs text-gray-600\">\r\n                                • Columna A: Nombre del beneficiario\r\n                            </p>\r\n                            <p className=\"text-xs text-gray-600\">\r\n                                • Columna B: Teléfonos (separados por comas)\r\n                            </p>\r\n                            <p className=\"text-xs text-gray-500 italic\">\r\n                                Nota: Los beneficiarios serán asignados a la teleoperadora seleccionada\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <input\r\n                        type=\"file\"\r\n                        onChange={(e) => setFile(e.target.files[0])}\r\n                        accept=\".xlsx,.xls\"\r\n                        className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\r\n                    />\r\n                    <button\r\n                        onClick={handleFileUpload}\r\n                        disabled={!file || !selectedOperadora}\r\n                        className=\"mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-300 disabled:cursor-not-allowed\"\r\n                    >\r\n                        <ArrowUpOnSquareIcon className=\"h-5 w-5 mr-2\" />\r\n                        Subir y Procesar Asignaciones\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Manual assignment section */}\r\n            <div className=\"bg-white rounded-xl shadow-md p-6\">\r\n                <h3 className=\"text-lg font-semibold mb-4\">Asignación Manual</h3>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700\">Operadora</label>\r\n                        <select\r\n                            value={selectedOperadora}\r\n                            onChange={(e) => setSelectedOperadora(e.target.value)}\r\n                            className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\r\n                        >\r\n                            <option value=\"\">Seleccionar operadora</option>\r\n                            {operadoras.map(op => (\r\n                                <option key={op.id} value={op.id}>{op.nombre}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700\">Beneficiario</label>\r\n                        <select\r\n                            value={selectedBeneficiario}\r\n                            onChange={(e) => setSelectedBeneficiario(e.target.value)}\r\n                            className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\r\n                        >\r\n                            <option value=\"\">Seleccionar beneficiario</option>\r\n                            {beneficiarios.map(b => (\r\n                                <option key={b.id} value={b.id}>{b.nombre}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <button\r\n                    onClick={handleCreateAssignment}\r\n                    disabled={!selectedOperadora || !selectedBeneficiario}\r\n                    className=\"mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:bg-gray-300 disabled:cursor-not-allowed\"\r\n                >\r\n                    Crear Asignación\r\n                </button>\r\n            </div>\r\n\r\n            {/* Current assignments section */}\r\n            <div className=\"bg-white rounded-xl shadow-md overflow-hidden\">\r\n                <div className=\"px-6 py-4 border-b border-gray-200\">\r\n                    <h3 className=\"text-lg font-semibold\">Asignaciones Actuales</h3>\r\n                </div>\r\n                <div className=\"divide-y divide-gray-200\">\r\n                    {operadoras.map(op => {\r\n                        const asignaciones = assignments.filter(a => a.operadoraId === op.id);\r\n                        \r\n                        return (\r\n                            <div key={op.id} className=\"p-6 border-b border-gray-200 last:border-b-0\">\r\n                                <div \r\n                                    className=\"flex items-center justify-between cursor-pointer hover:bg-gray-50 p-3 rounded-lg transition-colors\"\r\n                                    onClick={() => setExpandedOperadora(expandedOperadora === op.id ? null : op.id)}\r\n                                >\r\n                                    <div className=\"flex items-center space-x-3\">\r\n                                        <h4 className=\"text-lg font-medium text-gray-900\">{op.nombre}</h4>\r\n                                        <div className={`px-3 py-1 text-sm font-medium rounded-full ${\r\n                                            asignaciones.length > 0 ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'\r\n                                        }`}>\r\n                                            {asignaciones.length} beneficiarios\r\n                                        </div>\r\n                                    </div>\r\n                                    <ChevronDownIcon \r\n                                        className={`h-5 w-5 text-gray-500 transform transition-transform duration-200 ${\r\n                                            expandedOperadora === op.id ? 'rotate-180' : ''\r\n                                        }`} \r\n                                    />\r\n                                </div>\r\n                                \r\n                                {expandedOperadora === op.id && (\r\n                                    <div className=\"mt-4 space-y-2 pl-4\">\r\n                                        {asignaciones.length === 0 ? (\r\n                                            <p className=\"text-sm text-gray-500 italic py-4\">\r\n                                                No hay beneficiarios asignados a esta operadora\r\n                                            </p>\r\n                                        ) : (\r\n                                            <div className=\"space-y-2\">\r\n                                                {asignaciones.map(asignacion => {\r\n                                                    const beneficiario = beneficiarios.find(b => b.id === asignacion.beneficiarioId);\r\n                                                    return (\r\n                                                        <AsignacionCard\r\n                                                            key={asignacion.id}\r\n                                                            asignacion={asignacion}\r\n                                                            beneficiario={beneficiario}\r\n                                                            onDelete={handleDeleteAssignment}\r\n                                                        />\r\n                                                    );\r\n                                                })}\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            <Toast \r\n                message={toast.message}\r\n                type={toast.type}\r\n                onDismiss={() => setToast({ message: '', type: '' })}\r\n            />\r\n\r\n            {isUploading && <LoadingOverlay progress={uploadProgress} stats={uploadStats} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AssignmentManager;\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport { DataContext, db } from '../App';\r\nimport { collection, query, getDocs, where } from 'firebase/firestore';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\nconst StatCard = ({ title, value, subtitle, icon: Icon }) => (\r\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-md p-6 transition-colors duration-200\">\r\n        <div className=\"flex items-center\">\r\n            {Icon && <Icon className=\"h-8 w-8 text-blue-500 dark:text-blue-400 mr-3\" />}\r\n            <div>\r\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{title}</p>\r\n                <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{value}</h3>\r\n                {subtitle && <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">{subtitle}</p>}\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nconst Dashboard = () => {\r\n    const { callData, assignments } = useContext(DataContext);\r\n    const [localCallData, setLocalCallData] = useState({\r\n        totalLlamados: 0,\r\n        tiempoTotal: 0,\r\n        beneficiariosAtendidos: new Set(),\r\n        rendimientoPorOperadora: {}\r\n    });\r\n    const [filters, setFilters] = useState({\r\n        fechaInicio: '',\r\n        fechaFin: '',\r\n        operadora: 'Todas las operadoras',\r\n        comuna: 'Todas las comunas',\r\n        tipo: 'Todos los tipos'\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                // Obtener datos de llamadas\r\n                const llamadasQuery = query(collection(db, 'llamadas'));\r\n                const llamadasSnapshot = await getDocs(llamadasQuery);\r\n                \r\n                // Obtener datos de seguimientos\r\n                const seguimientosQuery = query(collection(db, 'seguimientos'));\r\n                const seguimientosSnapshot = await getDocs(seguimientosQuery);\r\n\r\n                const datos = {\r\n                    totalLlamados: 0,\r\n                    tiempoTotal: 0,\r\n                    beneficiariosAtendidos: new Set(),\r\n                    rendimientoPorOperadora: {}\r\n                };\r\n\r\n                // Procesar llamadas\r\n                llamadasSnapshot.forEach(doc => {\r\n                    const llamada = doc.data();\r\n                    datos.totalLlamados++;\r\n                    datos.tiempoTotal += llamada.duracion || 0;\r\n                    datos.beneficiariosAtendidos.add(llamada.beneficiario);\r\n\r\n                    if (llamada.operadora) {\r\n                        if (!datos.rendimientoPorOperadora[llamada.operadora]) {\r\n                            datos.rendimientoPorOperadora[llamada.operadora] = {\r\n                                llamados: 0,\r\n                                minutos: 0\r\n                            };\r\n                        }\r\n                        datos.rendimientoPorOperadora[llamada.operadora].llamados++;\r\n                        datos.rendimientoPorOperadora[llamada.operadora].minutos += llamada.duracion || 0;\r\n                    }\r\n                });\r\n\r\n                // Procesar seguimientos\r\n                seguimientosSnapshot.forEach(doc => {\r\n                    const seguimiento = doc.data();\r\n                    datos.totalLlamados++;\r\n                    datos.beneficiariosAtendidos.add(seguimiento.beneficiario);\r\n\r\n                    if (seguimiento.operadora) {\r\n                        if (!datos.rendimientoPorOperadora[seguimiento.operadora]) {\r\n                            datos.rendimientoPorOperadora[seguimiento.operadora] = {\r\n                                llamados: 0,\r\n                                minutos: 0\r\n                            };\r\n                        }\r\n                        datos.rendimientoPorOperadora[seguimiento.operadora].llamados++;\r\n                    }\r\n                });\r\n\r\n                setLocalCallData(datos);\r\n            } catch (error) {\r\n                console.error('Error al cargar datos:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);    // Preparar datos para los gráficos y tabla\r\n    const totalBeneficiarios = assignments?.beneficiarios?.length || 0;\r\n    const tiempoPromedioLlamada = localCallData.totalLlamados > 0 \r\n        ? Math.round((localCallData.tiempoTotal / localCallData.totalLlamados) * 10) / 10 \r\n        : 0;\r\n\r\n    // Asegurarse de que todas las operadoras asignadas aparezcan en la tabla\r\n    assignments?.operadoras?.forEach(op => {\r\n        const exists = rendimientoData.find(d => d.name === op.nombre);\r\n        if (!exists) {\r\n            rendimientoData.push({\r\n                name: op.nombre,\r\n                llamados: 0,\r\n                minutos: 0,\r\n                tiempoPromedio: 0\r\n            });\r\n        }\r\n    });\r\n\r\n    // Calcular métricas\r\n    const beneficiariosAtendidos = callData.beneficiariosAtendidos?.size || 0;\r\n    const porcentajeCobertura = totalBeneficiarios > 0 \r\n        ? Math.round((beneficiariosAtendidos / totalBeneficiarios) * 100)\r\n        : 0;    // Preparar datos para visualización\r\n    const rendimientoData = Object.entries(localCallData.rendimientoPorOperadora).map(([operadora, datos]) => ({\r\n        name: operadora,\r\n        llamados: datos.llamados,\r\n        minutos: datos.minutos,\r\n        tiempoPromedio: datos.llamados > 0 ? Math.round((datos.minutos / datos.llamados) * 10) / 10 : 0,\r\n        porcentajeTotal: Math.round((datos.llamados / localCallData.totalLlamados) * 100) || 0\r\n    }));\r\n\r\n    return (\r\n        <div className=\"space-y-6 p-6 dark:bg-gray-900\">\r\n            <div className=\"flex items-center justify-between mb-8\">\r\n                <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Dashboard de Análisis</h2>\r\n                <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                    Última actualización: {new Date().toLocaleString()}\r\n                </div>\r\n            </div>            {/* Métricas principales */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n                <StatCard\r\n                    title=\"Total de Llamados\"\r\n                    value={localCallData.totalLlamados}\r\n                    subtitle=\"Llamadas registradas\"\r\n                />\r\n                <StatCard\r\n                    title=\"Tiempo Total (min)\"\r\n                    value={Math.round(localCallData.tiempoTotal)}\r\n                    subtitle={`Promedio: ${tiempoPromedioLlamada} min/llamada`}\r\n                />\r\n                <StatCard\r\n                    title=\"Cobertura\"\r\n                    value={`${Math.round((localCallData.beneficiariosAtendidos.size / totalBeneficiarios) * 100)}%`}\r\n                    subtitle={`${localCallData.beneficiariosAtendidos.size} de ${totalBeneficiarios} beneficiarios`}\r\n                />\r\n                <StatCard\r\n                    title=\"Operadoras Activas\"\r\n                    value={Object.keys(localCallData.rendimientoPorOperadora).length}\r\n                    subtitle=\"Teleoperadoras en servicio\"\r\n                />\r\n            </div>\r\n\r\n            {/* Filtros con diseño mejorado */}\r\n            <div className=\"bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md space-y-4\">\r\n                <h3 className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4\">Filtros</h3>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\r\n                    <div className=\"space-y-2\">\r\n                        <label className=\"block text-sm font-medium text-gray-600\">Fecha Inicio</label>\r\n                        <input\r\n                            type=\"date\"\r\n                            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                            value={filters.fechaInicio}\r\n                            onChange={(e) => setFilters({...filters, fechaInicio: e.target.value})}\r\n                        />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                        <label className=\"block text-sm font-medium text-gray-600\">Fecha Fin</label>\r\n                        <input\r\n                            type=\"date\"\r\n                            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                            value={filters.fechaFin}\r\n                            onChange={(e) => setFilters({...filters, fechaFin: e.target.value})}\r\n                        />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                        <label className=\"block text-sm font-medium text-gray-600\">Operadora</label>\r\n                        <select\r\n                            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                            value={filters.operadora}\r\n                            onChange={(e) => setFilters({...filters, operadora: e.target.value})}\r\n                        >\r\n                            <option>Todas las operadoras</option>\r\n                            {assignments?.operadoras?.map(op => (\r\n                                <option key={op.id}>{op.nombre}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                        <label className=\"block text-sm font-medium text-gray-600\">Comuna</label>\r\n                        <select\r\n                            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                            value={filters.comuna}\r\n                            onChange={(e) => setFilters({...filters, comuna: e.target.value})}\r\n                        >\r\n                            <option>Todas las comunas</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                        <label className=\"block text-sm font-medium text-gray-600\">Tipo</label>\r\n                        <select\r\n                            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                            value={filters.tipo}\r\n                            onChange={(e) => setFilters({...filters, tipo: e.target.value})}\r\n                        >\r\n                            <option>Todos los tipos</option>\r\n                            <option>Entrante</option>\r\n                            <option>Saliente</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Métricas principales con diseño mejorado */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n                <StatCard\r\n                    title=\"Total Llamados\"\r\n                    value={callData.totalLlamados || 0}\r\n                    subtitle=\"Llamadas registradas\"\r\n                />\r\n                <StatCard\r\n                    title=\"Tiempo Total\"\r\n                    value={`${callData.tiempoTotal || 0} min`}\r\n                    subtitle={`${tiempoPromedioLlamada} min/llamada`}\r\n                />\r\n                <StatCard\r\n                    title=\"Cobertura\"\r\n                    value={`${porcentajeCobertura}%`}\r\n                    subtitle={`${beneficiariosAtendidos} de ${totalBeneficiarios} beneficiarios`}\r\n                />\r\n                <StatCard\r\n                    title=\"Operadoras Activas\"\r\n                    value={assignments?.operadoras?.length || 0}\r\n                    subtitle=\"Teleoperadoras registradas\"\r\n                />\r\n            </div>\r\n\r\n            {/* Gráfico de Llamados por Teleoperadora */}\r\n            <div className=\"mt-8\">\r\n                <h3 className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4\">Rendimiento por Teleoperadora</h3>\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-md p-6\">\r\n                    <ResponsiveContainer width=\"100%\" height={400}>\r\n                        <BarChart data={rendimientoData}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\r\n                            <XAxis dataKey=\"name\" stroke=\"#374151\" />\r\n                            <YAxis stroke=\"#374151\" />\r\n                            <Tooltip \r\n                                contentStyle={{ \r\n                                    backgroundColor: '#1f2937',\r\n                                    border: 'none',\r\n                                    borderRadius: '0.5rem',\r\n                                    color: '#f3f4f6'\r\n                                }}\r\n                            />\r\n                            <Legend />\r\n                            <Bar dataKey=\"llamados\" fill=\"#3b82f6\" name=\"Llamados\" />\r\n                            <Bar dataKey=\"minutos\" fill=\"#10b981\" name=\"Minutos\" />\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"mt-8\">\r\n                <h3 className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 mb-4\">Detalle por Teleoperadora</h3>\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden\">\r\n                    <div className=\"overflow-x-auto\">\r\n                        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n                            <thead className=\"bg-gray-50 dark:bg-gray-700\">\r\n                                <tr>\r\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Operadora</th>\r\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Llamados</th>\r\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Minutos Totales</th>\r\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Tiempo Promedio</th>\r\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">% del Total</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                                {rendimientoData.map((operadora, idx) => (\r\n                                    <tr key={idx} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">{operadora.name}</td>\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">{operadora.llamados}</td>\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">{operadora.minutos}</td>\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">{operadora.tiempoPromedio}</td>\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">{operadora.porcentajeTotal}%</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useState, useContext, useMemo } from 'react';\r\nimport { DataContext } from '../App';\r\nimport { ExclamationTriangleIcon, CheckCircleIcon, XCircleIcon, FunnelIcon } from '@heroicons/react/24/outline';\r\nimport { normalizeName } from '../utils/textUtils';\r\nimport { getTeleoperadora } from '../utils/operadoraUtils';\r\n\r\nconst STATUS = {\r\n    OK: 'ok',            // Al día con al menos 1 llamada exitosa en los últimos 15 días\r\n    WARNING: 'warning',  // Tiene llamadas pero no exitosas en los últimos 15 días\r\n    DANGER: 'danger'    // Sin llamadas o sin llamadas exitosas en los últimos 30 días\r\n};\r\n\r\n// Función para calcular el estado de un beneficiario\r\nconst getBeneficiaryStatus = (llamadas) => {\r\n    if (!llamadas || llamadas.length === 0) return STATUS.DANGER;\r\n\r\n    const now = new Date();\r\n    const llamadasOrdenadas = [...llamadas].sort((a, b) => new Date(b.fecha) - new Date(a.fecha));\r\n    const ultimaLlamada = llamadasOrdenadas[0];\r\n    const diasDesdeUltimaLlamada = Math.floor((now - new Date(ultimaLlamada.fecha)) / (1000 * 60 * 60 * 24));\r\n\r\n    // Buscar la última llamada exitosa\r\n    const ultimaLlamadaExitosa = llamadasOrdenadas.find(llamada => \r\n        llamada.resultado?.toLowerCase().includes('exitoso')\r\n    );\r\n\r\n    if (ultimaLlamadaExitosa) {\r\n        const diasDesdeUltimaExitosa = Math.floor((now - new Date(ultimaLlamadaExitosa.fecha)) / (1000 * 60 * 60 * 24));\r\n        if (diasDesdeUltimaExitosa <= 15) {\r\n            return STATUS.OK;\r\n        }\r\n    }\r\n\r\n    if (diasDesdeUltimaLlamada > 30) {\r\n        return STATUS.DANGER;\r\n    }\r\n\r\n    return STATUS.WARNING;\r\n};\r\n\r\n// Función para obtener el número de llamadas exitosas en el mes actual\r\nconst getLlamadasExitosasDelMes = (llamadas) => {\r\n    if (!llamadas || !Array.isArray(llamadas)) return 0;\r\n    \r\n    const now = new Date();\r\n    const primerDiaMes = new Date(now.getFullYear(), now.getMonth(), 1);\r\n    \r\n    return llamadas.filter(llamada => {\r\n        const fechaLlamada = new Date(llamada.fecha);\r\n        return fechaLlamada >= primerDiaMes && \r\n               fechaLlamada <= now && \r\n               llamada.resultado?.toLowerCase().includes('exitoso');\r\n    }).length;\r\n};\r\n\r\n// Tarjeta de beneficiario\r\nconst BeneficiaryCard = ({ \r\n    beneficiary = 'Sin nombre', \r\n    status = STATUS.DANGER, \r\n    comuna = 'Sin comuna registrada', \r\n    llamadasExitosas = [], \r\n    totalLlamadas = 0, \r\n    llamadasExitosasDelMes = 0,\r\n    ultimaLlamada\r\n}) => {\r\n    return (\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4 space-y-4\">\r\n            <div className=\"flex justify-between items-start\">\r\n                <div className=\"space-y-1\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                        {beneficiary}\r\n                    </h3>\r\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                        {comuna}\r\n                    </p>\r\n                </div>\r\n                <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${\r\n                    status === STATUS.OK ? 'bg-green-100 text-green-800' :\r\n                    status === STATUS.WARNING ? 'bg-yellow-100 text-yellow-800' :\r\n                    'bg-red-100 text-red-800'\r\n                }`}>\r\n                    {status === STATUS.OK ? 'Al día' : status === STATUS.WARNING ? 'Pendiente' : 'Urgente'}\r\n                </span>\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\r\n                    Total llamadas: {totalLlamadas}\r\n                </p>\r\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\r\n                    Llamadas exitosas este mes: {llamadasExitosasDelMes}\r\n                </p>\r\n                {ultimaLlamada && (\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-300\">\r\n                        Última llamada: {ultimaLlamada}\r\n                    </p>\r\n                )}\r\n                {llamadasExitosas && llamadasExitosas.length > 0 && (\r\n                    <div className=\"space-y-1\">\r\n                        <p className=\"text-xs font-medium text-gray-500 dark:text-gray-400\">\r\n                            Últimas llamadas exitosas:\r\n                        </p>\r\n                        {llamadasExitosas.slice(-3).reverse().map((fecha, index) => (\r\n                            <div key={`${fecha}-${index}`} className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                                {fecha}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction FollowUpHistory() {\r\n    const { callData, assignments } = useContext(DataContext);\r\n    const [activeFilter, setActiveFilter] = useState('all');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedComuna, setSelectedComuna] = useState('all');\r\n\r\n    // Procesar datos de beneficiarios\r\n    const beneficiaryData = useMemo(() => {\r\n        if (!callData?.llamadasPorBeneficiario) {\r\n            console.log('No hay datos de beneficiarios');\r\n            return [];\r\n        }\r\n\r\n        return Object.entries(callData.llamadasPorBeneficiario).map(([beneficiario, datos]) => {\r\n            const llamadas = datos.llamadas || [];\r\n            const status = getBeneficiaryStatus(llamadas);\r\n            const comuna = llamadas[0]?.comuna || 'Sin comuna';\r\n            const llamadasExitosas = llamadas.filter(ll => ll.resultado?.toLowerCase().includes('exitoso'));\r\n            const ultimaLlamada = llamadas.length > 0 \r\n                ? new Date(Math.max(...llamadas.map(ll => new Date(ll.fecha)))).toLocaleDateString()\r\n                : null;\r\n\r\n            return {\r\n                beneficiario,\r\n                status,\r\n                comuna,\r\n                llamadasExitosas: llamadasExitosas.map(ll => new Date(ll.fecha).toLocaleDateString()),\r\n                totalLlamadas: llamadas.length,\r\n                llamadasExitosasDelMes: getLlamadasExitosasDelMes(llamadas),\r\n                ultimaLlamada\r\n            };\r\n        });\r\n    }, [callData?.llamadasPorBeneficiario]);\r\n\r\n    // Filtrar beneficiarios\r\n    const filteredBeneficiaries = useMemo(() => {\r\n        return beneficiaryData.filter(b => {\r\n            const matchesSearch = b.beneficiario.toLowerCase().includes(searchTerm.toLowerCase());\r\n            const matchesComuna = selectedComuna === 'all' || b.comuna === selectedComuna;\r\n            const matchesFilter = activeFilter === 'all' || \r\n                                (activeFilter === 'uptodate' && b.status === STATUS.OK) ||\r\n                                (activeFilter === 'urgent' && b.status === STATUS.DANGER) ||\r\n                                (activeFilter === 'warning' && b.status === STATUS.WARNING);\r\n            \r\n            return matchesSearch && matchesComuna && matchesFilter;\r\n        });\r\n    }, [beneficiaryData, searchTerm, selectedComuna, activeFilter]);\r\n\r\n    // Obtener comunas únicas\r\n    const comunas = useMemo(() => {\r\n        const uniqueComunas = new Set(beneficiaryData.map(b => b.comuna));\r\n        return Array.from(uniqueComunas).sort();\r\n    }, [beneficiaryData]);\r\n\r\n    // Contar beneficiarios por estado\r\n    const counts = useMemo(() => ({\r\n        total: beneficiaryData.length,\r\n        uptodate: beneficiaryData.filter(b => b.status === STATUS.OK).length,\r\n        urgentes: beneficiaryData.filter(b => b.status === STATUS.DANGER).length,\r\n        pendientes: beneficiaryData.filter(b => b.status === STATUS.WARNING).length\r\n    }), [beneficiaryData]);\r\n\r\n    const StatusCounter = ({ label, count, className }) => (\r\n        <div className={`flex flex-col items-center p-4 rounded-lg shadow-md ${className}`}>\r\n            <span className=\"text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase\">{label}</span>\r\n            <span className=\"text-2xl font-bold text-gray-900 dark:text-white\">{count}</span>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"p-6 space-y-6\">\r\n            {/* Filtros */}\r\n            <div className=\"flex flex-col lg:flex-row gap-4 items-start lg:items-center bg-white dark:bg-gray-800 p-4 rounded-lg shadow\">\r\n                <div className=\"flex items-center gap-2\">\r\n                    <FunnelIcon className=\"h-5 w-5 text-gray-500 dark:text-gray-400\" />\r\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Filtros:</span>\r\n                </div>\r\n                \r\n                {/* Selector de Comuna */}\r\n                <div className=\"flex-1\">\r\n                    <select\r\n                        value={selectedComuna}\r\n                        onChange={(e) => setSelectedComuna(e.target.value)}\r\n                        className=\"block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm focus:border-blue-500 focus:ring-blue-500 dark:text-gray-200\"\r\n                    >\r\n                        {comunas.map(comuna => (\r\n                            <option key={comuna} value={comuna}>\r\n                                {comuna === 'todas' ? 'Todas las comunas' : comuna}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                {/* Selector de Estado */}\r\n                <div className=\"flex-1\">\r\n                    <select\r\n                        value={activeFilter}\r\n                        onChange={(e) => setActiveFilter(e.target.value)}\r\n                        className=\"block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm focus:border-blue-500 focus:ring-blue-500 dark:text-gray-200\"\r\n                    >\r\n                        <option value=\"all\">Todos los estados</option>\r\n                        <option value={STATUS.OK}>Al día</option>\r\n                        <option value={STATUS.WARNING}>Atención</option>\r\n                        <option value={STATUS.DANGER}>Urgentes</option>\r\n                    </select>\r\n                </div>\r\n\r\n                {/* Buscador */}\r\n                <div className=\"flex-1\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Buscar beneficiario...\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                        className=\"block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm focus:border-blue-500 focus:ring-blue-500 dark:text-gray-200\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* Contadores */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n                <StatusCounter\r\n                    label=\"Todos\"\r\n                    count={counts.total}\r\n                    className=\"bg-gray-100 dark:bg-gray-700\"\r\n                />\r\n                <StatusCounter\r\n                    label=\"Al día\"\r\n                    count={counts.uptodate}\r\n                    className=\"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-100\"\r\n                />\r\n                <StatusCounter\r\n                    label=\"Urgentes\"\r\n                    count={counts.urgentes}\r\n                    className=\"bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-100\"\r\n                />\r\n                <StatusCounter\r\n                    label=\"Pendientes\"\r\n                    count={counts.pendientes}\r\n                    className=\"bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-100\"\r\n                />\r\n            </div>\r\n\r\n            {/* Lista de Beneficiarios */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                {filteredBeneficiaries.map((b, index) => (\r\n                    <BeneficiaryCard\r\n                        key={`${b.beneficiario}-${index}`}\r\n                        beneficiary={b.beneficiario}\r\n                        status={b.status}\r\n                        comuna={b.comuna}\r\n                        llamadasExitosas={b.llamadasExitosas}\r\n                        totalLlamadas={b.totalLlamadas}\r\n                        llamadasExitosasDelMes={b.llamadasExitosasDelMes}\r\n                        ultimaLlamada={b.ultimaLlamada}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FollowUpHistory;\r\n","import React, { useState } from 'react';\r\nimport { useAuth } from '../App';\r\n\r\nconst LoginForm = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const { signIn } = useAuth();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            setError('');\r\n            await signIn(email, password);\r\n        } catch (err) {\r\n            setError('Error al iniciar sesión: ' + err.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8\">\r\n            <div className=\"max-w-md w-full space-y-8\">\r\n                <div>\r\n                    <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white\">\r\n                        Iniciar Sesión\r\n                    </h2>\r\n                </div>\r\n                <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\r\n                    <div className=\"rounded-md shadow-sm -space-y-px\">\r\n                        <div>\r\n                            <label htmlFor=\"email-address\" className=\"sr-only\">\r\n                                Correo electrónico\r\n                            </label>\r\n                            <input\r\n                                id=\"email-address\"\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                autoComplete=\"email\"\r\n                                required\r\n                                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 dark:text-white dark:bg-gray-800 dark:border-gray-700 rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\r\n                                placeholder=\"Correo electrónico\"\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"password\" className=\"sr-only\">\r\n                                Contraseña\r\n                            </label>\r\n                            <input\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                required\r\n                                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 dark:text-white dark:bg-gray-800 dark:border-gray-700 rounded-b-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\r\n                                placeholder=\"Contraseña\"\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {error && (\r\n                        <div className=\"text-red-500 text-sm text-center\">\r\n                            {error}\r\n                        </div>\r\n                    )}\r\n\r\n                    <div>\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n                        >\r\n                            Iniciar Sesión\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport App from './App'\r\nimport { ThemeProvider, AuthProvider, DataProvider } from './App'\r\nimport './index.css'\r\n\r\nReactDOM.createRoot(document.getElementById('root')).render(\r\n  <React.StrictMode>\r\n    <ThemeProvider>\r\n      <AuthProvider>\r\n        <DataProvider>\r\n          <App />\r\n        </DataProvider>\r\n      </AuthProvider>\r\n    </ThemeProvider>\r\n  </React.StrictMode>\r\n)\r\n"],"names":["f","require$$0","k","Symbol","for","l","m","Object","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","c","a","g","b","d","e","h","call","defaultProps","$$typeof","type","props","_owner","current","reactJsxRuntime_production_min","jsx","jsxs","jsxRuntimeModule","exports","ArrowDownOnSquareIcon","title","titleId","svgRef","assign","xmlns","fill","viewBox","strokeWidth","stroke","React.createElement","id","strokeLinecap","strokeLinejoin","client","createRoot","hydrateRoot","ArrowDownOnSquareIcon$1","React.forwardRef","ArrowPathIcon","ArrowPathIcon$1","ArrowUpOnSquareIcon","ArrowUpOnSquareIcon$1","ChartBarIcon","ChartBarIcon$1","ChevronDownIcon","ChevronDownIcon$1","ClockIcon","ClockIcon$1","DocumentTextIcon","DocumentTextIcon$1","FunnelIcon","FunnelIcon$1","PhoneIcon","PhoneIcon$1","TrashIcon","TrashIcon$1","getTeleoperadora","telefono","nombre","assignments","asignaciones","normalizedTelefono","toString","trim","normalizedNombre","normalizeName","operadoraNombre","entries","Array","isArray","some","asignacion","nombreAsignacionNormalizado","beneficiario","nombreCoincide","telefonoCoincide","telefonos","tel","ErrorBoundary","React","Component","constructor","super","this","state","hasError","error","getDerivedStateFromError","componentDidCatch","errorInfo","console","render","className","children","message","jsxRuntimeExports","onClick","setState","StatsDisplay$1","memo","value","icon","subtitle","percentage","toLocaleString","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","options","responsive","maintainAspectRatio","plugins","legend","position","scales","y","beginAtZero","ticks","precision","BarChart","data","_a","labels","length","Bar","DetailedStatsView","stats","operatorStats","comunasData","comunas","map","comuna","beneficiarios","cantidad","sort","operadorasData","operadora","totalLlamadas","promedioLlamadas","toFixed","duracionPromedio","duracionTotal","Math","round","Fragment","colSpan","index","datasets","label","backgroundColor","LoadingOverlay","progress","style","width","CallDataAnalyzer","callData","updateCallData","useContext","DataContext","file","setFile","useState","loading","setLoading","setProgress","setError","setStats","createInitialStats","fileInputRef","useRef","debounceTimerRef","uploadTimeout","processingTimeout","initialStatsRef","previousStatsRef","useEffect","clearTimeout","async","docRef","doc","db","docSnap","getDoc","exists","parsedStats","parseStoredStats","log","processFile","useCallback","reader","FileReader","onload","target","result","Error","Uint8Array","workbook","read","SheetNames","firstSheet","Sheets","rows","utils","sheet_to_json","header","dataRows","slice","totalRows","currentStats","processChunk","startIndex","endIndex","min","forEach","row","fecha","evento","horaIni","horaFin","duracion","resultado","observacion","apiId","fechaObj","excelDateToISO","teleoperadora","exitoso","toLowerCase","includes","duracionMinutos","parseInt","llamada","hora","tipo","comentarios","entrantes","salientes","isNaN","add","llamadasPorBeneficiario","push","ultimasLlamadas","has","set","Set","get","ultimaLlamada","diasDesdeUltimaLlamada","floor","Date","beneficiariosAlDia","beneficiariosPendientes","beneficiariosUrgentes","teleoperadoras","total","exitosas","err","setTimeout","onerror","readAsArrayBuffer","handleFileChange","event","selectedFile","files","name","match","JSON","stringify","setDoc","from","fromEntries","reduce","acc","llamadas","estado","_b","toISOString","llamadasExitosas","datos","prepareStatsForStorage","resetState","click","disabled","onChange","accept","fillRule","clipRule","StatsDisplay","size","Map","horasPico","diasTrabajados","Logo","darkMode","toggleTheme","ThemeContext","src","alt","Toast","onDismiss","timer","processed","beneficiariosCreados","duplicadosEncontrados","asignacionesCreadas","errores","AsignacionCard","onDelete","stopPropagation","AssignmentManager","operadoras","setOperadoras","setBeneficiarios","setAssignments","selectedOperadora","setSelectedOperadora","selectedBeneficiario","setSelectedBeneficiario","expandedOperadora","setExpandedOperadora","toast","setToast","isUploading","setIsUploading","uploadProgress","setUploadProgress","uploadStats","setUploadStats","loadingStatus","checkDataLoaded","status","handleCreateAssignment","find","op","newAssignment","operadoraId","beneficiarioId","createdAt","assignmentRef","collection","handleDeleteAssignment","assignmentId","beneficiarioNombre","deleteDoc","validateBeneficiario","beneficiariosRef","nombreQuery","query","where","telefonoQuery","nombreSnapshot","telefonoSnapshot","Promise","all","getDocs","resolve","empty","existente","docs","existe","handleFileUpload","arrayBuffer","worksheet","asignacionesRef","asignacionesQuery","asignacionesSnapshot","batch","writeBatch","delete","commit","prev","split","t","filter","beneficiarioExistente","beneficiarioRef","asignacionRef","isMounted","unsubscribes","operadorasQuery","unsubOperadoras","onSnapshot","snapshot","user","rol","beneficiariosQuery","unsubBeneficiarios","beneficiariosData","unsubAsignaciones","assignmentsData","unsub","StatCard","Icon","Dashboard","localCallData","setLocalCallData","totalLlamados","tiempoTotal","beneficiariosAtendidos","rendimientoPorOperadora","filters","setFilters","fechaInicio","fechaFin","llamadasQuery","llamadasSnapshot","seguimientosQuery","seguimientosSnapshot","llamados","minutos","seguimiento","totalBeneficiarios","tiempoPromedioLlamada","rendimientoData","tiempoPromedio","_c","porcentajeCobertura","porcentajeTotal","keys","_d","_e","ResponsiveContainer","height","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","contentStyle","border","borderRadius","color","scope","idx","STATUS","getLlamadasExitosasDelMes","now","primerDiaMes","getFullYear","getMonth","fechaLlamada","BeneficiaryCard","beneficiary","llamadasExitosasDelMes","reverse","FollowUpHistory","activeFilter","setActiveFilter","searchTerm","setSearchTerm","selectedComuna","setSelectedComuna","beneficiaryData","useMemo","llamadasOrdenadas","ultimaLlamadaExitosa","getBeneficiaryStatus","ll","max","toLocaleDateString","filteredBeneficiaries","matchesSearch","matchesComuna","matchesFilter","uniqueComunas","counts","uptodate","urgentes","pendientes","StatusCounter","count","placeholder","LoginForm","email","setEmail","password","setPassword","signIn","useAuth","onSubmit","preventDefault","htmlFor","autoComplete","required","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getAnalytics","auth","getAuth","getFirestore","AuthContext","createContext","AuthProvider","setUser","onAuthStateChanged","signInWithEmailAndPassword","signOut","Provider","initialCallData","lastUpdate","DataProvider","setCallData","saved","localStorage","getItem","parse","savedCallData","setItem","newData","prevData","updateAssignments","newAssignments","reset","removeItem","ThemeProvider","setDarkMode","document","documentElement","classList","toggle","MainContent","activeTab","setActiveTab","App","ReactDOM","getElementById","StrictMode"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12]}