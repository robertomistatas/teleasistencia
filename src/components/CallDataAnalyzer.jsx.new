import React, { useState, useCallback, useRef, useContext } from 'react';
import { read, utils } from 'xlsx';
import { 
    ArrowUpOnSquareIcon, 
    ArrowDownOnSquareIcon,
    ChartBarIcon,
    PhoneIcon,
    ClockIcon,
    DocumentTextIcon
} from '@heroicons/react/24/outline';
import { collection, getDocs, setDoc, doc } from 'firebase/firestore';
import { normalizeName } from '../utils/textUtils';
import StatsDisplay from './StatsDisplay';
import DetailedStatsView from './DetailedStatsView';
import ErrorBoundary from './ErrorBoundary';
import { DataContext } from '../App';
import { db } from '../App';

// Constantes para el manejo del archivo
const CHUNK_SIZE = 1000;  // Procesar 1000 filas a la vez
const DEBOUNCE_DELAY = 300; // 300ms de espera entre eventos de cambio de archivo

const LoadingOverlay = ({ progress }) => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl flex flex-col items-center w-80 max-w-[90vw]">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 dark:border-blue-400 mb-4"></div>
            <p className="text-lg mb-4 text-gray-900 dark:text-white">Procesando archivo...</p>
            {progress > 0 && (
                <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                    <div 
                        className="bg-blue-600 dark:bg-blue-500 h-2.5 rounded-full transition-all duration-300" 
                        style={{ width: `${progress}%` }}
                    ></div>
                </div>
            )}
        </div>
    </div>
);

function CallDataAnalyzer() {
    const { assignments, updateCallData } = useContext(DataContext);
    const [file, setFile] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [progress, setProgress] = useState(0);
    const [waitingForAssignments, setWaitingForAssignments] = useState(false);
    const [stats, setStats] = useState({
        totalLlamadas: 0,
        entrantes: 0,
        salientes: 0,
        duracionTotal: 0,
        duracionPromedio: 0,
        beneficiarios: new Set(),
        llamadasPorBeneficiario: {},
        ultimasLlamadas: {},
        llamadasExitosas: {},
        beneficiariosAlDia: new Set(),
        beneficiariosPendientes: new Set(),
        beneficiariosUrgentes: new Set()
    });
    const [operatorStats, setOperatorStats] = useState({});    const uploadTimeout = useRef(null);
    const processingTimeout = useRef(null);    // Función para obtener la teleoperadora asignada a un beneficiario por su teléfono o nombre    const getTeleoperadora = useCallback((telefono, nombre) => {
        if (!assignments?.asignaciones) {
            return 'No identificada';
        }

        // Normalizar el teléfono y el nombre para la búsqueda
        const normalizedTelefono = telefono?.toString().trim();
        const normalizedNombre = normalizeName(nombre);

        if (!normalizedTelefono && !normalizedNombre) {
            return 'No identificada';
        }

        // Buscar en las asignaciones de cada operadora
        for (const [operadoraNombre, asignaciones] of Object.entries(assignments.asignaciones)) {
            if (!Array.isArray(asignaciones)) {
                continue;
            }

            const encontrado = asignaciones.some(asignacion => {
                if (!asignacion) return false;

                // Normalizar el nombre del beneficiario en la asignación
                const nombreAsignacionNormalizado = normalizeName(asignacion.beneficiario);

                // Verificar coincidencia por nombre normalizado
                const nombreCoincide = normalizedNombre && nombreAsignacionNormalizado === normalizedNombre;

                // Verificar coincidencia por teléfono
                const telefonoCoincide = normalizedTelefono && asignacion.telefonos && 
                    Array.isArray(asignacion.telefonos) &&
                    asignacion.telefonos.some(tel => 
                        tel?.toString().trim() === normalizedTelefono
                    );

                return nombreCoincide || telefonoCoincide;
            });
            
            if (encontrado) {
                return operadoraNombre;
            }
        }
        
        return 'No identificada';
    }, [assignments?.asignaciones]);

    const handleFileChange = useCallback((e) => {
        const selectedFile = e.target.files[0];
        if (!selectedFile) return;

        // Clear any existing timeouts
        if (uploadTimeout.current) {
            clearTimeout(uploadTimeout.current);
        }

        uploadTimeout.current = setTimeout(() => {
            // Validate file type
            const validTypes = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
                'application/vnd.ms-excel' // .xls
            ];
            if (!validTypes.includes(selectedFile.type)) {
                setError('Por favor seleccione un archivo Excel (.xlsx o .xls)');
                return;
            }

            // Validate file size (max 10MB)
            const maxSize = 10 * 1024 * 1024; // 10MB
            if (selectedFile.size > maxSize) {
                setError('El archivo es demasiado grande. Máximo 10MB.');
                return;
            }

            setFile(selectedFile);
            setError(null);
        }, DEBOUNCE_DELAY);
    }, []);

    const processExcelFile = async (data) => {
        try {
            const workbook = read(data, { type: 'array', cellDates: true });
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];

            if (!worksheet) {
                throw new Error('No se encontró ninguna hoja en el archivo Excel');
            }

            // Obtener los encabezados para identificar las columnas
            const headers = utils.sheet_to_json(worksheet, { header: 1, blankrows: false })[0];
            
            // Mapear índices de columnas sin logging
            const colIndexes = {
                evento: headers.findIndex(h => h?.toString().toLowerCase().includes('evento')),
                beneficiario: headers.findIndex(h => h?.toString().toLowerCase().includes('beneficiario')),
                comuna: headers.findIndex(h => h?.toString().toLowerCase().includes('comuna')),
                fecha: headers.findIndex(h => h?.toString().toLowerCase().includes('fecha')),
                fono: headers.findIndex(h => h?.toString().toLowerCase().includes('fono')),
                resultado: headers.findIndex(h => h?.toString().toLowerCase().includes('resultado'))
            };

            // Validar solo las columnas esenciales
            const requiredColumns = ['evento', 'beneficiario', 'fecha', 'resultado'];
            const missingColumns = requiredColumns.filter(col => colIndexes[col] === -1);

            if (missingColumns.length > 0) {
                throw new Error(`Faltan columnas esenciales en el archivo: ${missingColumns.join(', ')}`);
            }

            return { worksheet, colIndexes };
        } catch (error) {
            throw new Error(`Error procesando el archivo Excel: ${error.message}`);
        }
    };

    const handleFileUpload = useCallback(async () => {
        if (!file) {
            setError('Por favor seleccione un archivo');
            return;
        }

        setLoading(true);
        setError(null);
        setProgress(0);

        try {
            const reader = new FileReader();
            
            reader.onload = async (e) => {
                try {
                    const data = new Uint8Array(e.target.result);
                    const { worksheet, colIndexes } = await processExcelFile(data);

                    // Obtener todas las filas excepto la primera (encabezados)
                    const rows = utils.sheet_to_json(worksheet, { header: 1, blankrows: false, range: 1 });
                    const totalRows = rows.length;
                    let processedRows = 0;

                    // Procesar en chunks
                    while (processedRows < totalRows) {
                        const chunk = rows.slice(processedRows, processedRows + CHUNK_SIZE);
                        const chunkStats = processRowsChunk(chunk, processedRows, totalRows, colIndexes);
                        
                        setStats(prevStats => ({
                            ...prevStats,
                            totalLlamadas: prevStats.totalLlamadas + chunkStats.totalLlamadas,
                            entrantes: prevStats.entrantes + chunkStats.entrantes,
                            salientes: prevStats.salientes + chunkStats.salientes,
                            duracionTotal: prevStats.duracionTotal + chunkStats.duracionTotal,
                            duracionPromedio: calculateNewAverage(
                                prevStats.duracionPromedio,
                                prevStats.totalLlamadas,
                                chunkStats.duracionPromedio,
                                chunkStats.totalLlamadas
                            ),
                            beneficiarios: new Set([...prevStats.beneficiarios, ...chunkStats.beneficiarios]),
                            llamadasPorBeneficiario: mergeLlamadasPorBeneficiario(
                                prevStats.llamadasPorBeneficiario,
                                chunkStats.llamadasPorBeneficiario
                            ),
                            ultimasLlamadas: {
                                ...prevStats.ultimasLlamadas,
                                ...chunkStats.ultimasLlamadas
                            },
                            llamadasExitosas: mergeLlamadasExitosas(
                                prevStats.llamadasExitosas,
                                chunkStats.llamadasExitosas
                            )
                        }));

                        processedRows += chunk.length;
                        setProgress(Math.round((processedRows / totalRows) * 100));
                    }

                    // Actualizar datos globales
                    await updateCallData(stats);
                    
                    setFile(null);
                    setLoading(false);
                    setProgress(0);
                } catch (error) {
                    console.error('Error procesando el archivo:', error);
                    setError(`Error procesando el archivo: ${error.message}`);
                    setLoading(false);
                }
            };

            reader.onerror = () => {
                setError('Error leyendo el archivo');
                setLoading(false);
            };

            reader.readAsArrayBuffer(file);
        } catch (error) {
            console.error('Error cargando el archivo:', error);
            setError(`Error cargando el archivo: ${error.message}`);
            setLoading(false);
        }
    }, [file, stats, updateCallData]);

    // Función para parsear correctamente la fecha del formato DD-MM-YYYY
    const parseDate = useCallback((dateStr) => {
        if (!dateStr) return null;
        try {
            const [day, month, year] = dateStr.split('-').map(num => num.trim());
            return new Date(year, month - 1, day);
        } catch (error) {
            console.error('Error parsing date:', dateStr, error);
            return null;
        }
    }, []);

    // Función para determinar si una llamada fue exitosa
    const isCallSuccessful = useCallback((resultado) => {
        if (!resultado) return false;
        const resultadoLower = resultado.toString().toLowerCase().trim();
        // Lista más exhaustiva de términos que indican una llamada exitosa
        const exitoTerminos = [
            'exitoso',
            'llamado exitoso',
            'llamada exitosa',
            'si contesta',
            'contesta',
            'contactado',
            'contactada',
            'se logra contactar',
            'se contacta',
            'responde',
            'contesta llamado'
        ];
        return exitoTerminos.some(termino => resultadoLower.includes(termino));
    }, []);

    // Funciones helper
    const calculateNewAverage = (prevAvg, prevCount, newAvg, newCount) => {
        const totalCount = prevCount + newCount;
        if (totalCount === 0) return 0;
        return ((prevAvg * prevCount) + (newAvg * newCount)) / totalCount;
    };

    const mergeLlamadasPorBeneficiario = (prev, current) => {
        const merged = { ...prev };
        Object.entries(current).forEach(([beneficiario, llamadas]) => {
            merged[beneficiario] = (merged[beneficiario] || 0) + llamadas;
        });
        return merged;
    };

    const mergeLlamadasExitosas = (prev, current) => {
        const merged = { ...prev };
        Object.entries(current).forEach(([beneficiario, fechas]) => {
            if (!merged[beneficiario]) {
                merged[beneficiario] = [];
            }
            merged[beneficiario] = [...merged[beneficiario], ...fechas]
                .sort((a, b) => new Date(b) - new Date(a))
                .filter((fecha, index, self) => 
                    self.findIndex(f => f.toDateString() === fecha.toDateString()) === index
                );
        });
        return merged;
    };

    const processRowsChunk = (rows, startIndex, totalRows, colIndexes) => {
        const chunkStats = {
            totalLlamadas: 0,
            entrantes: 0,
            salientes: 0,
            duracionTotal: 0,
            duracionPromedio: 0,
            beneficiarios: new Set(),
            llamadasPorBeneficiario: {},
            ultimasLlamadas: {},
            llamadasExitosas: {}
        };

        rows.forEach(row => {
            // Validar que la fila tenga los datos esenciales
            if (!row[colIndexes.beneficiario] || !row[colIndexes.evento] || !row[colIndexes.fecha]) return;

            const beneficiario = normalizeName(row[colIndexes.beneficiario].toString());
            const fecha = new Date(row[colIndexes.fecha]);
            const evento = row[colIndexes.evento]?.toString().toLowerCase() || '';
            const resultado = row[colIndexes.resultado]?.toString().toLowerCase() || '';
            
            // Validar fecha
            if (isNaN(fecha.getTime())) return;

            // Actualizar estadísticas básicas
            chunkStats.totalLlamadas++;
            
            // Determinar tipo de llamada basado en el evento
            const esEntrante = evento.includes('entrante') || evento.includes('entrada');
            esEntrante ? chunkStats.entrantes++ : chunkStats.salientes++;

            // Agregar beneficiario al conjunto
            chunkStats.beneficiarios.add(beneficiario);

            // Actualizar llamadas por beneficiario
            chunkStats.llamadasPorBeneficiario[beneficiario] = 
                (chunkStats.llamadasPorBeneficiario[beneficiario] || 0) + 1;

            // Actualizar última llamada
            if (!chunkStats.ultimasLlamadas[beneficiario] || 
                fecha > new Date(chunkStats.ultimasLlamadas[beneficiario])) {
                chunkStats.ultimasLlamadas[beneficiario] = fecha;
            }

            // Registrar llamada exitosa basada en el resultado
            if (resultado.includes('exitosa') || resultado.includes('exitoso')) {
                if (!chunkStats.llamadasExitosas[beneficiario]) {
                    chunkStats.llamadasExitosas[beneficiario] = [];
                }
                chunkStats.llamadasExitosas[beneficiario].push(fecha);
            }

            // Usar una duración estimada basada en el tipo de llamada y resultado
            const duracionEstimada = resultado.includes('exitosa') || resultado.includes('exitoso') ? 5 : 2;
            chunkStats.duracionTotal += duracionEstimada;
        });

        // Calcular duración promedio para este chunk
        chunkStats.duracionPromedio = chunkStats.totalLlamadas > 0 
            ? chunkStats.duracionTotal / chunkStats.totalLlamadas 
            : 0;

        return chunkStats;
    };

    const processFile = useCallback(async (file) => {
        setLoading(true);
        setError(null);
        setProgress(0);

        const reader = new FileReader();
        reader.onload = async (e) => {
            const data = new Uint8Array(e.target.result);
            const workbook = read(data, { type: 'array', cellDates: true });
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];

            // Obtener los encabezados para identificar las columnas
            const headers = utils.sheet_to_json(worksheet, { header: 1, blankrows: false })[0];
            const colIndexes = {
                evento: headers.findIndex(header => header.toLowerCase().includes('evento')),
                beneficiario: headers.findIndex(header => header.toLowerCase().includes('beneficiario')),
                comuna: headers.findIndex(header => header.toLowerCase().includes('comuna')),
                ini: headers.findIndex(header => header.toLowerCase().includes('inicio')),
                seg: headers.findIndex(header => header.toLowerCase().includes('duracion')),
                fecha: headers.findIndex(header => header.toLowerCase().includes('fecha')),
                fono: headers.findIndex(header => header.toLowerCase().includes('fono')),
                resultado: headers.findIndex(header => header.toLowerCase().includes('resultado'))
            };

            // Validar que todas las columnas necesarias estén presentes
            const missingColumns = Object.keys(colIndexes).filter(key => colIndexes[key] === -1);
            if (missingColumns.length > 0) {
                setError(`Faltan columnas en el archivo: ${missingColumns.join(', ')}`);
                setLoading(false);
                return;
            }

            const rows = utils.sheet_to_json(worksheet, { header: 1, blankrows: false, range: 1 });
            const totalRows = rows.length;
            let processedRows = 0;

            // Procesar en chunks
            while (processedRows < totalRows) {
                const chunk = rows.slice(processedRows, processedRows + CHUNK_SIZE);
                const chunkStats = processRowsChunk(chunk, 0, chunk.length, colIndexes);

                // Actualizar estadísticas acumulativas
                setStats(prevStats => ({
                    ...prevStats,
                    totalLlamadas: prevStats.totalLlamadas + chunkStats.totalLlamadas,
                    entrantes: prevStats.entrantes + chunkStats.entrantes,
                    salientes: prevStats.salientes + chunkStats.salientes,
                    duracionTotal: prevStats.duracionTotal + chunkStats.duracionTotal,
                    duracionPromedio: (prevStats.duracionPromedio * prevStats.totalLlamadas + chunkStats.duracionPromedio * chunkStats.totalLlamadas) / (prevStats.totalLlamadas + chunkStats.totalLlamadas),
                    beneficiarios: new Set([...prevStats.beneficiarios, ...chunkStats.beneficiarios]),
                    comunas: new Map([...prevStats.comunas, ...chunkStats.comunas]),
                    horasPico: new Map([...prevStats.horasPico, ...chunkStats.horasPico])
                }));

                processedRows += chunk.length;
                setProgress(Math.min(100, (processedRows / totalRows) * 100));
            }

            setLoading(false);
        };

        reader.onerror = (error) => {
            setError('Error al leer el archivo');
            setLoading(false);
            console.error('Error reading file:', error);
        };

        reader.readAsArrayBuffer(file);
    }, [processRowsChunk]);

    // Efecto para manejar la carga del archivo
    useEffect(() => {
        if (file) {
            processFile(file);
        }
    }, [file, processFile]);

    // Efecto para manejar la actualización de las estadísticas en el contexto
    useEffect(() => {
        if (Object.keys(operatorStats).length > 0) {
            updateCallData(stats, operatorStats);
        }
    }, [stats, operatorStats, updateCallData]);

    const handleRetry = useCallback(() => {
        setFile(null);
        setStats({
            totalLlamadas: 0,
            entrantes: 0,
            salientes: 0,
            duracionTotal: 0,
            duracionPromedio: 0,
            beneficiarios: new Set(),
            comunas: new Map(),
            horasPico: new Map()
        });
        setOperatorStats({});
        setProgress(0);
        setError(null);
    }, []);

    const fileInputRef = useRef(null);

    return (
        <ErrorBoundary>
            <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
                <div className="flex flex-col lg:flex-row items-start lg:items-center justify-between mb-6 space-y-4 lg:space-y-0">
                    <h2 className="text-2xl font-bold text-gray-900 dark:text-white flex items-center">
                        <DocumentTextIcon className="h-8 w-8 mr-2 text-blue-500 dark:text-blue-400" />
                        Registro de Llamadas
                    </h2>
                    
                    <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4">
                        <button
                            onClick={() => fileInputRef.current?.click()}
                            className="inline-flex items-center px-4 py-2 bg-blue-500 dark:bg-blue-600 text-white rounded-lg hover:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-colors duration-200"
                        >
                            <ArrowUpOnSquareIcon className="h-5 w-5 mr-2" />
                            Seleccionar Archivo
                        </button>
                        
                        <button
                            onClick={handleFileUpload}
                            disabled={!file || loading}
                            className={`inline-flex items-center px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-colors duration-200
                                ${file && !loading 
                                    ? 'bg-green-500 dark:bg-green-600 text-white hover:bg-green-600 dark:hover:bg-green-700 focus:ring-green-500' 
                                    : 'bg-gray-300 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed'}`}
                        >
                            <ArrowDownOnSquareIcon className="h-5 w-5 mr-2" />
                            Procesar Archivo
                        </button>
                    </div>
                    
                    <input
                        type="file"
                        ref={fileInputRef}
                        onChange={handleFileChange}
                        accept=".xlsx,.xls"
                        className="hidden"
                    />
                </div>

                {error && (
                    <div className="mb-6 p-4 bg-red-100 dark:bg-red-900 border-l-4 border-red-500 text-red-700 dark:text-red-200">
                        <p className="font-medium">Error: {error}</p>
                    </div>
                )}

                {loading && <LoadingOverlay progress={progress} />}

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <StatsDisplay
                        icon={<PhoneIcon className="h-8 w-8 text-blue-500" />}
                        title="Total de Llamadas"
                        value={stats.totalLlamadas}
                        subtitle={`${stats.entrantes} entrantes, ${stats.salientes} salientes`}
                    />
                    
                    <StatsDisplay
                        icon={<ChartBarIcon className="h-8 w-8 text-green-500" />}
                        title="Beneficiarios Únicos"
                        value={stats.beneficiarios.size}
                        subtitle="Total de personas contactadas"
                    />
                    
                    <StatsDisplay
                        icon={<ClockIcon className="h-8 w-8 text-purple-500" />}
                        title="Duración Promedio"
                        value={`${Math.round(stats.duracionPromedio)} min`}
                        subtitle={`Total: ${Math.round(stats.duracionTotal)} min`}
                    />
                </div>

                {stats.totalLlamadas > 0 && (
                    <DetailedStatsView 
                        stats={stats}
                        assignments={assignments}
                    />
                )}
            </div>
        </ErrorBoundary>
    );
}

export default CallDataAnalyzer;
